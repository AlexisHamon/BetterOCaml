
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20210419

module MenhirBasics = struct
  
  exception Error
  
  type token = Js_token.token
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 18 "js_parser.mly"
  
(*
 * src: ocamlyaccified from Marcel Laverdet 'fbjs2' via emacs macros, itself
 * extracted from the official ECMAscript specification at:
 *  http://www.ecma-international.org/publications/standards/ecma-262.htm
 *
 * see also http://en.wikipedia.org/wiki/ECMAScript_syntax
 *
 * related work:
 *  - http://marijnhaverbeke.nl/parse-js/, js parser in common lisp
 *    (which has been since ported to javascript by nodejs people)
 *  - jslint
 *)

module J = Javascript

let var pi name = J.ident ~loc:(Pi pi) name


# 41 "js_parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | Js_token.EOF _ ->
          89
      | Js_token.TComment _ ->
          88
      | Js_token.TCommentLineDirective _ ->
          87
      | Js_token.TUnknown _ ->
          86
      | Js_token.T_AND _ ->
          85
      | Js_token.T_ASSIGN _ ->
          84
      | Js_token.T_BIT_AND _ ->
          83
      | Js_token.T_BIT_AND_ASSIGN _ ->
          82
      | Js_token.T_BIT_NOT _ ->
          81
      | Js_token.T_BIT_OR _ ->
          80
      | Js_token.T_BIT_OR_ASSIGN _ ->
          79
      | Js_token.T_BIT_XOR _ ->
          78
      | Js_token.T_BIT_XOR_ASSIGN _ ->
          77
      | Js_token.T_BREAK _ ->
          76
      | Js_token.T_CASE _ ->
          75
      | Js_token.T_CATCH _ ->
          74
      | Js_token.T_COLON _ ->
          73
      | Js_token.T_COMMA _ ->
          72
      | Js_token.T_CONTINUE _ ->
          71
      | Js_token.T_DEBUGGER _ ->
          70
      | Js_token.T_DECR _ ->
          69
      | Js_token.T_DECR_NB _ ->
          68
      | Js_token.T_DEFAULT _ ->
          67
      | Js_token.T_DELETE _ ->
          66
      | Js_token.T_DIV _ ->
          65
      | Js_token.T_DIV_ASSIGN _ ->
          64
      | Js_token.T_DO _ ->
          63
      | Js_token.T_ELSE _ ->
          62
      | Js_token.T_EQUAL _ ->
          61
      | Js_token.T_FALSE _ ->
          60
      | Js_token.T_FINALLY _ ->
          59
      | Js_token.T_FOR _ ->
          58
      | Js_token.T_FUNCTION _ ->
          57
      | Js_token.T_GREATER_THAN _ ->
          56
      | Js_token.T_GREATER_THAN_EQUAL _ ->
          55
      | Js_token.T_IDENTIFIER _ ->
          54
      | Js_token.T_IF _ ->
          53
      | Js_token.T_IN _ ->
          52
      | Js_token.T_INCR _ ->
          51
      | Js_token.T_INCR_NB _ ->
          50
      | Js_token.T_INSTANCEOF _ ->
          49
      | Js_token.T_LBRACKET _ ->
          48
      | Js_token.T_LCURLY _ ->
          47
      | Js_token.T_LESS_THAN _ ->
          46
      | Js_token.T_LESS_THAN_EQUAL _ ->
          45
      | Js_token.T_LPAREN _ ->
          44
      | Js_token.T_LSHIFT _ ->
          43
      | Js_token.T_LSHIFT_ASSIGN _ ->
          42
      | Js_token.T_MINUS _ ->
          41
      | Js_token.T_MINUS_ASSIGN _ ->
          40
      | Js_token.T_MOD _ ->
          39
      | Js_token.T_MOD_ASSIGN _ ->
          38
      | Js_token.T_MULT _ ->
          37
      | Js_token.T_MULT_ASSIGN _ ->
          36
      | Js_token.T_NEW _ ->
          35
      | Js_token.T_NOT _ ->
          34
      | Js_token.T_NOT_EQUAL _ ->
          33
      | Js_token.T_NULL _ ->
          32
      | Js_token.T_NUMBER _ ->
          31
      | Js_token.T_OR _ ->
          30
      | Js_token.T_PERIOD _ ->
          29
      | Js_token.T_PLING _ ->
          28
      | Js_token.T_PLUS _ ->
          27
      | Js_token.T_PLUS_ASSIGN _ ->
          26
      | Js_token.T_RBRACKET _ ->
          25
      | Js_token.T_RCURLY _ ->
          24
      | Js_token.T_REGEX _ ->
          23
      | Js_token.T_RETURN _ ->
          22
      | Js_token.T_RPAREN _ ->
          21
      | Js_token.T_RSHIFT _ ->
          20
      | Js_token.T_RSHIFT3 _ ->
          19
      | Js_token.T_RSHIFT3_ASSIGN _ ->
          18
      | Js_token.T_RSHIFT_ASSIGN _ ->
          17
      | Js_token.T_SEMICOLON _ ->
          16
      | Js_token.T_SPREAD _ ->
          15
      | Js_token.T_STRICT_EQUAL _ ->
          14
      | Js_token.T_STRICT_NOT_EQUAL _ ->
          13
      | Js_token.T_STRING _ ->
          12
      | Js_token.T_SWITCH _ ->
          11
      | Js_token.T_THIS _ ->
          10
      | Js_token.T_THROW _ ->
          9
      | Js_token.T_TRUE _ ->
          8
      | Js_token.T_TRY _ ->
          7
      | Js_token.T_TYPEOF _ ->
          6
      | Js_token.T_VAR _ ->
          5
      | Js_token.T_VIRTUAL_SEMICOLON _ ->
          4
      | Js_token.T_VOID _ ->
          3
      | Js_token.T_WHILE _ ->
          2
      | Js_token.T_WITH _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | Js_token.EOF _v ->
          Obj.repr _v
      | Js_token.TComment _v ->
          Obj.repr _v
      | Js_token.TCommentLineDirective _v ->
          Obj.repr _v
      | Js_token.TUnknown _v ->
          Obj.repr _v
      | Js_token.T_AND _v ->
          Obj.repr _v
      | Js_token.T_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_BIT_AND _v ->
          Obj.repr _v
      | Js_token.T_BIT_AND_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_BIT_NOT _v ->
          Obj.repr _v
      | Js_token.T_BIT_OR _v ->
          Obj.repr _v
      | Js_token.T_BIT_OR_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_BIT_XOR _v ->
          Obj.repr _v
      | Js_token.T_BIT_XOR_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_BREAK _v ->
          Obj.repr _v
      | Js_token.T_CASE _v ->
          Obj.repr _v
      | Js_token.T_CATCH _v ->
          Obj.repr _v
      | Js_token.T_COLON _v ->
          Obj.repr _v
      | Js_token.T_COMMA _v ->
          Obj.repr _v
      | Js_token.T_CONTINUE _v ->
          Obj.repr _v
      | Js_token.T_DEBUGGER _v ->
          Obj.repr _v
      | Js_token.T_DECR _v ->
          Obj.repr _v
      | Js_token.T_DECR_NB _v ->
          Obj.repr _v
      | Js_token.T_DEFAULT _v ->
          Obj.repr _v
      | Js_token.T_DELETE _v ->
          Obj.repr _v
      | Js_token.T_DIV _v ->
          Obj.repr _v
      | Js_token.T_DIV_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_DO _v ->
          Obj.repr _v
      | Js_token.T_ELSE _v ->
          Obj.repr _v
      | Js_token.T_EQUAL _v ->
          Obj.repr _v
      | Js_token.T_FALSE _v ->
          Obj.repr _v
      | Js_token.T_FINALLY _v ->
          Obj.repr _v
      | Js_token.T_FOR _v ->
          Obj.repr _v
      | Js_token.T_FUNCTION _v ->
          Obj.repr _v
      | Js_token.T_GREATER_THAN _v ->
          Obj.repr _v
      | Js_token.T_GREATER_THAN_EQUAL _v ->
          Obj.repr _v
      | Js_token.T_IDENTIFIER _v ->
          Obj.repr _v
      | Js_token.T_IF _v ->
          Obj.repr _v
      | Js_token.T_IN _v ->
          Obj.repr _v
      | Js_token.T_INCR _v ->
          Obj.repr _v
      | Js_token.T_INCR_NB _v ->
          Obj.repr _v
      | Js_token.T_INSTANCEOF _v ->
          Obj.repr _v
      | Js_token.T_LBRACKET _v ->
          Obj.repr _v
      | Js_token.T_LCURLY _v ->
          Obj.repr _v
      | Js_token.T_LESS_THAN _v ->
          Obj.repr _v
      | Js_token.T_LESS_THAN_EQUAL _v ->
          Obj.repr _v
      | Js_token.T_LPAREN _v ->
          Obj.repr _v
      | Js_token.T_LSHIFT _v ->
          Obj.repr _v
      | Js_token.T_LSHIFT_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_MINUS _v ->
          Obj.repr _v
      | Js_token.T_MINUS_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_MOD _v ->
          Obj.repr _v
      | Js_token.T_MOD_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_MULT _v ->
          Obj.repr _v
      | Js_token.T_MULT_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_NEW _v ->
          Obj.repr _v
      | Js_token.T_NOT _v ->
          Obj.repr _v
      | Js_token.T_NOT_EQUAL _v ->
          Obj.repr _v
      | Js_token.T_NULL _v ->
          Obj.repr _v
      | Js_token.T_NUMBER _v ->
          Obj.repr _v
      | Js_token.T_OR _v ->
          Obj.repr _v
      | Js_token.T_PERIOD _v ->
          Obj.repr _v
      | Js_token.T_PLING _v ->
          Obj.repr _v
      | Js_token.T_PLUS _v ->
          Obj.repr _v
      | Js_token.T_PLUS_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_RBRACKET _v ->
          Obj.repr _v
      | Js_token.T_RCURLY _v ->
          Obj.repr _v
      | Js_token.T_REGEX _v ->
          Obj.repr _v
      | Js_token.T_RETURN _v ->
          Obj.repr _v
      | Js_token.T_RPAREN _v ->
          Obj.repr _v
      | Js_token.T_RSHIFT _v ->
          Obj.repr _v
      | Js_token.T_RSHIFT3 _v ->
          Obj.repr _v
      | Js_token.T_RSHIFT3_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_RSHIFT_ASSIGN _v ->
          Obj.repr _v
      | Js_token.T_SEMICOLON _v ->
          Obj.repr _v
      | Js_token.T_SPREAD _v ->
          Obj.repr _v
      | Js_token.T_STRICT_EQUAL _v ->
          Obj.repr _v
      | Js_token.T_STRICT_NOT_EQUAL _v ->
          Obj.repr _v
      | Js_token.T_STRING _v ->
          Obj.repr _v
      | Js_token.T_SWITCH _v ->
          Obj.repr _v
      | Js_token.T_THIS _v ->
          Obj.repr _v
      | Js_token.T_THROW _v ->
          Obj.repr _v
      | Js_token.T_TRUE _v ->
          Obj.repr _v
      | Js_token.T_TRY _v ->
          Obj.repr _v
      | Js_token.T_TYPEOF _v ->
          Obj.repr _v
      | Js_token.T_VAR _v ->
          Obj.repr _v
      | Js_token.T_VIRTUAL_SEMICOLON _v ->
          Obj.repr _v
      | Js_token.T_VOID _v ->
          Obj.repr _v
      | Js_token.T_WHILE _v ->
          Obj.repr _v
      | Js_token.T_WITH _v ->
          Obj.repr _v
  
  and default_reduction =
    (16, "\000\000\000\000\000\000\000\000\000\000\000\029\001\003\001\b\001\016\000\000\000\145\000\144\000\000\000\000\000\000\000\000\000\000\000k\000W\000i\000h\000g\000f\000n\000e\000d\000c\001\014\000b\000l\000a\000U\000T\000`\000Q\000_\000^\000S\000m\000V\000]\000\\\000[\000o\000Z\000R\000Y\000X\000\000\0004\000\000\000\000\000\000\000\007\000\000\000\000\001=\000\000\001;\000\164\000\000\000\000\000\000\000\000\001\025\000\131\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\001\004\001\t\001\000\000\132\000\000\000\212\000\213\000\215\001\001\001\007\001\005\000v\000\000\000\000\000\134\000\000\000\000\000+\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\214\001\002\000\148\000\147\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\168\001\006\001\n\000\000\000\166\000\000\000\170\000\000\000\180\000\000\000\169\000\000\000\167\000\000\000\000\000\000\000\000\000\023\000\024\000\020\000\017\000\019\000\021\000\022\000\018\000\026\000\027\000\025\000\016\000\000\000\n\000\011\000\000\000\000\0015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000D\000C\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\129\000\000\000\005\000\004\000\000\000\000\001\019\000\000\000\000\000\133\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\000\000\000\000\001\021\000\156\001<\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\000\000\001\017\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\r\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\184\000\000\000\182\000\000\000\186\000\000\000\185\000\000\000\183\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\000\000\000tx\000\000\000\000\000\138\000\000\000\000\000\137\000$\000\000\000\000\000\015\0012\000\000\000\000\000u\001+\001-\001.\001#\000\000\000\000\000H\0013\001$\001)\001*\001%\000\014\000\000\000\000\000'\000\000\000\000\000&\000%\001&\000G\000L\000\000\000\000\000\000\000\158\001\023\000\000\000\000\000\000\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\000\000\000\000\000\000M\000\000\000\000\000\000\000\000\000K\000\000\000\000\000F\000E\000\000\000\000\000p\000\000\000\127\000(\000\000\000\000\000\000\0006\000\000\0014\000\000\000\162\000\000\000{\000\000\0003\000\028\000\000\000\000\000J\000\000\000\000\000\000\000\000\000)\001:\000\000\0019\000\154\001>\000\000\000\000\000\000\000\000\000\000\000O\001\029\000\000\000}\001\030\000\000\0002\000P\000\000\000\000\000?\000\000\000;\000\000\000\006\000@\000\000\000\000\000\t\000\000\000=\000\000\000\b\000<\000\146\000\000\000\000\001\028\001\015\001\r\000\000\0001\000\000\000\000\001\011\000\141\000\000\000\135\000\000\000\000\000\000\000\000\000\000\000\000\001?\000\001\000\000\001\012\000\000\000\002\000\000\001\031")
  
  and error =
    (90, "w\248\131\017\176I\182i/\b@@\000\000\000\000\002\000\000\000\000\000\001*\128\017\027\004\155$\130\192\004\000J\160\004F\193&\201 \176\001\000\018\168\001\017\176I\178H,\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\000*\000@d\002`\146\000\000\000\001*\128\017\027\004\155$\130\192\004\000J\160\004F\193&\201 \176\001\000w\248\002\129\144\000N{b\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000@\000\000\000\000\000\b\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000w\248\131\145\176I\182i/\b@\000\000\000\000\000\002\000\000\000\000\000\001*\128\017\027\004\155$\130\192\004\000\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\004\170\000Dl\018l\146\011\000\016\001*\128\017\027\004\155$\130\192\004\000J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\006\156\218EVi\132H\194\148@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\006\252\254O\254\233\132\200\199\188]\252\000\128$\000\019\158\204\206\000\000\000\000\000\000\000\000\000\000\000\000\000J\164\020F\193&\201 \176\001\000\018\168\001\017\176I\178H,\000@\000\000\000\000\000\000\000\000\000\000\000\000\128i\205\164Uf\152D\140)DJ\160\004F\193&\201 \176\001\000\b\006\156\218EVi\132H\194\148D\170\000Dl\018l\146\011\000\016\000\128i\205\164Uf\152D\140)DJ\160\004F\193&\201 \176\001\000\b\006\156\218EVi\132H\194\148@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\191?\147\255\186a21\239\023\127\000 \t\000\004\231\1793\128\000\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\002\001\1612\144\001\146a\0000\165\017*\128\017\027\004\155$\130\192\004\000 \026\019)\000\025&\016\003\nnQ\018\168\001\017\176I\178H,\000@\002\001\191>\147\253\154aa\0000\165\017*\128\017\027\004\155$\130\192\004\000 \026\019)\000\025&\016\003\nQ\018\168\001\017\176I\178H,\000@\002\001\1612\144\001\146a\0000\165\017*\128\017\027\004\155$\130\192\004\000 \026\019)\000\025&\016\003\nQ\018\168\001\017\176I\178H,\000@\002\001\1612\144\001\146a\0000\165\017*\128\017\027\004\155$\130\192\004\000 \026\019)\000\025&\016\003\nQ\018\168\001\017\176I\178H,\000@\002\001\1612\144\001\146a\0000\165\016\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\002\001\1676\145U\154a\0180\165\017*\128\017\027\004\155$\130\192\004\000 \026si\021Y\166\017#\nQ\018\168\001\017\176I\178H,\000@\002\001\1676\145U\154a\0180\165\017*\128\017\027\004\155$\130\192\004\000 \026si\021Y\166\017#\nQ\018\168\001\017\176I\178H,\000@\002\001\1676\145U\154ai\205\164Uf\152D\140)D \026si\021Y\166\017#\nQ\b\006\156\218EVi\132H\194\148@\000\001\000\000\000\000\000\000 \000\007\127\1361\027\004\155b\146\240\132\000J\160\004F\193&\201 \176\001\000\b\006\152\026EVi\132H\130\148\000\000\000\000\000\000\000\128\000\000\000\000\128\b\000\000\000\000\000\000\b\000\128J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000 \000\000\000\000\000\000 \000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\000\000\000\000\000\001\000\000\000\000\000\029\254 \228l\018m\138K\194\016\001*\128\017\027\004\155$\130\192\004\000 \002\000\000\000\000\000\000\002\000\000\000\000\000\000\000\b\000\000\000\000\000\004\170\000Dl\018l\146\011\000\016\000\000\000@\000\000\000\000\000\b\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\128\000\000\000\000\016\016\000\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\012\000\001\223\226\014F\193&\216\164\252a\000\000\000\000\000\000\000\000\000\000\000\000\006\170 Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \002\016\000\000\000\000\000\002\000\000\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\000\168\001\001\144\t\130H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128o\131\228\255\238\152L\136{\192\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\000\000\000\000\000\000\128\000\000\000\000\000J\160\004F\193&\201 \176\001\000\000\000\004\000\000\000\000\000\000\128\000\029\254 \196l\018m\138K\194\016\000\128o\131\228\255\238\152L\140{\192\000\000\000\000\000 \000\000\000\000\000\022\168\129\017\176I\178H,\000@\000\000\000\000\000\000\000\128\000\000\000\000\000\b\000\000\000\000\128\000\b\000\128J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\166\006\145U\154a\0180\165\000\000h\000\164\000d\152@\012)@J\160\004F\193&\201 \176\001\000\000\006\128\n@\006I\132\000\194\148\004\170\000Dl\018l\146\011\000\016\000\000h\000\164\000d\152@\012)@J\160\004F\193&\201 \176\001\000\000\006\248:O\246i\132\200\199\188\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000J\160\004F\193&\201 \176\001\000\000\006\128\n@\006I\132\000\194\148\004\170\000Dl\018l\146\011\000\016\000\000h\000\164\000d\152@\012)@J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\004\170\000Dl\018l\146\011\000\016\000\000h\000\164\000d\152@\012)@J\160\004F\193&\201 \176\001\000\000\006\128\n@\006I\132\000\194\148\004\170\000Dl\018l\146\011\000\016\000\000h\000\164\000d\152@\012)@J\160\004F\193&\201 \176\001\000\000\006\128\n@\006I\132\000\194\148\004\170\000Dl\018l\146\011\000\016\000\000h\000\164\000d\152@\012)@\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\b\000\000\128\000\004\170\000Dl\018l\146\011\000\016\000\000\000@\000\000\000\000\000\b\000\001\223\226\012F\193&\216\164\188!\000w\248\131\017\176I\182)/\b@\004\170\000Dl\018l\146\011\000\016\000\128i\129\164Uf\152D\136)@J\160\004F\193&\201 \176\001\000\b\006\152\026EVi\132H\130\148\004\170\000Dl\018l\146\011\000\016\000\128i\129\164Uf\152D\136)@\000\000\000\000\000\000\000\000\000\000\000\b\000\128\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\128\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\001*\128\017\027\004\155$\130\192\004\000\000\000\016\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \026`i\021Y\166\017\"\nP\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\018\168\001\017\176I\178H,\000@\002\001\166\006\145U\154a\018 \165\001*\128\017\027\004\155$\130\192\004\000 \026`i\021Y\166\017\"\nP\000\000\000\000\000\000\000\000\000\000\000\002\001\160\002\144\001\146a\000 \165\001*\128\017\027\004\155$\130\192\004\000 \026\000)\000\025&\016\002\nP\018\168\001\017\176I\178H,\000@\002\001\160\002\144\001\146a\000 \165\001*\128\017\027\004\155$\130\192\004\000\000\000\000\000\000\000\000\000\001\000\000\018\168\001\017\176I\178H,\000@\000\000\000\000\000\000\000\000\000\000\000\001*\128\017\027\004\155$\130\192\004\000 \026\000)\000\025&\016\002\nP\018\168\001\017\176I\178H,\000@\002\001\160\002\144\001\146anP\018\168\001\017\176I\178H,\000@\002\001\160\002\144\001\146a\000 \165\001*\128\017\027\004\155$\130\192\004\000 \026\000)\000\025&\016\002\nP\018\168\001\017\176I\178H,\000@\002\001\160\002\144\001\146a\000 \165\001*\128\017\027\004\155$\130\192\004\000 \026\000)\000\025&\016\002\nP\000\000\000\000\000\000\000\000\000\000\000\002\001\190\015\147\255\186a2!\239\007\127\000 \t\000\004\231\1793\128\000\000\000\000\000\000\000\000\000\000\000\000\018\168\001\017\176I\178H,\000@\000\000\000\016\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\006\248:O\246i\132\200\135\188\004\170\000Dl\018l\146\011\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\029\254 \196l\018mbw\248\131\017\176I\182)/\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000J\162\004F\193&\201 \176\001\000\000\000\128\000\000\000\000\000\000\000\000\004\170\001Dl\018l\146\011\000\016\000\000\000@\000\000\000\000\000\000\000\001\223\226\012F\193&\216\164\188!\000\000\000\000\000\000\000\000\000\000\000\000\000\001\190\014\147\253\154a2!\239\001*\128\017\027\004\155$\130\192\004\000\000\000\016\000\000\000\000\000\002\000\000w\248\131\017\176I\182)/\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\127\1369\027\004\155f\179\241\132\005\223\226\012F\193&\216\164\188!\000\000\000\000\000\000\000\000\000\000\000\000\029\254 \228l\018m\138O\198\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\016\000\007\127\1369\027\004\155b\146\241\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\b\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\127\1369\027\004\155g\179\241\132\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\254 \228l\018m\154K\194\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \026si\021Y\166\017#\nQ\b\006\156\218EVid\000\019\158\204\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \026si\021Y\166\017#\nQ\000\000\004\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \027\243\249?\251\166\019#\030\241\000\000\000\000\000\000\000\000\000\000\000\002\001\1676\145U\154a\0180\165\016\128i\205\164Uf\152D\140)D \026si\021Y\166\017#\nQ\b\006\156\218EVi\132H\194\148@\000\001\000\000\000\000\000\000 \000\007\127\1361\027\004\155b\146\240\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000J\160\004F\193&\201 \176\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\016\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    2
  
  and action =
    ((16, "\005\140\000O P P P\000\000\000\000\000\000\000\000 P\000\000\000\000 P\004\226 P P\019`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000W P P\000\000 P P\000\000\000W\000\000\000\000\000$\0008\000'\000W\000\000\000\000\000X\000b\006\186\000~ P\000\000 P P P P\000\000\000\000\000\000\000\000\007H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\019`\000\000 P P\000\000\007\226 P\b| P\t\022 P\t\176\000\000\000\000\000\000\000\000\000\146\019`\000\000 P!\244 P\"P P\000\000\000\000\000\000 P\000\000 P\000\000 P\000\000 P\000\000 P\000\000 P\"\172 P\001,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 P\000\000\000\000\000^ P\000\000 P#\b P#d P#\192 P$\028 P$x P$\212 P%0\000-\000\000 P\000\000\000\000\000\000 P\nJ P\n\228 P\011~ P\012\024 P\012\178\000\000\000\000\001l\000\000\000\000\000B P\000\000 P\000\r\000\000\000\000\rL\r\230\014\128\000\174\005\140 P\020x\000W\000n P\000\000\000l\000W\000\000\000\000\000\000 P\021\n\001@\005\140 P\000\136\001H P\000\220\001D\000) P\000\131\005\140\000\000 \190\000\000\000\252 P\021\156 P\022.\004\226\000\000\000\t\000\000 P\022\192 P\023R P\023\228\001R P\000\224\005\140\001\198\001Z P\000W\000\022 P\000\000\024l%\140 P%\232 P&D P\001, P\000\000\000\000\001( P\000\000 P&\160 P&\252 P\000\000 P\000\000 P\000\000 P\000\000 P\000\000 P'X P'\180 P(\016 P(l P(\200\000\000\000\144 P\000\244\005\140\005\140 P\024\254 P\025\144 P\026\"\000\000\000\004\000\000\000\000\000\000\000\004\000\000 P\026\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\000\000\000\000\000\000\001\192\001\130 P\001\024\000\000\000\000\000\000\027F P\027\216 P\028j P\028\252 P\029\142 P\030  P\030\178 P\031D P\031\214\000\000)$ P)\128 P)\220 P\001J P\000\000 P*8 P*\148 P\000\000 P\000\000 P\000\000 P\000\000 P\000\000 P\000\000 P*\240 P+L P+\168 P,\004 P,`\000\000\002`\019`\000\000 P\000\214\000\000\000\000\004\226 P\000\000\000\000\001R\005\140\000\000\000\000\000\000\000\000\000\000\001\b P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\250\019`\000\000 P\000\220\000\000\000\000\000\000\000\000\000\000\000W\000\022\000\144\000\000\000\000\001\208 \190\001\210 \190\001\202\005\140\000\000\001\214 \190\001\228 \190\001\220\005\140\000\000\006\016 P\001 \005\140\000\000\000\176 P\000\000\000\000\004N\005\140\000\000\005\140\000\000\000\000\001:\001x\005\140\000\000\001\220\000\000\000)\000\000\000)\000\000\001\244\000\000\000\000\001.\001@\000\000\001\212\000W\002\006\001@\000\000\000\000\003\164\000\000\000\000\000\000\000W\001\218\0008\002\014\000b\000\000\000\000\006\186\000\000\000\000\002\n\000\000\000\000\015\026\015\180\000\000 \190\000\000\001&\000\000\000\000\001(!(\000\000!\146\000\000\002\n\000\000\000\000\000\000\000\250\019\248\000\000\000\000\000\000\002\014\000\000\016N\001H\000\000\000\000\000\t\000\000\016\232\017\130\018\028\018\182\001h\005\140\000\000\000\000\001\144\000\000 P\000\000\000-\000\000"), (16, "\002-\002\137\004]\002\142\001\229\000\n\002y\002\146\003n\002-\002-\000\226\002-\002-\002-\002-\002-\002-\002y\002\242\002-\002-\002-\002-\002-\001f\002-\002q\000\198\002-\000\206\004\246\002-\002-\002-\002-\002-\002-\002-\002-\001n\002-\002-\004\250\002\234\002-\002-\001\229\002-\002\005\002\146\002-\002-\000\254\004E\003f\004\182\002-\004M\002i\002-\002-\000\246\002q\002-\001\014\002\146\b[\002-\002-\004M\002i\004\221\002-\002-\002-\002-\001\217\002-\002-\002-\002-\000\226\002q\004\221\002-\001\217\001\217\004U\001\217\001\217\001\217\001\217\001\217\001\217\003\222\001\018\001\217\001\217\001\217\001\217\001\217\001\170\001\217\002]\002\226\001\217\001\026\003\n\001\217\001\217\001\217\001\217\001\217\001\217\001\217\001\217\001n\001\217\001\217\002J\001\178\001\217\001\217\004\134\001\217\003*\002i\001\217\001\217\002U\003^\006\n\003\198\001\217\006v\001!\001\217\001\217\003\030\002\146\001\217\002U\004\142\006\138\001\217\001\217\002U\001!\004e\001\217\001\217\001\217\001\217\003U\001\217\001\217\001\217\001\217\002\146\006\238\005\018\001\217\003U\003U\006\226\003U\002\n\002\014\003U\003U\003U\007\198\000\229\003U\003U\002\018\003U\003U\002\146\003U\002\129\002\146\003U\002\146\b\022\002\022\003U\002\026\003U\002\030\003U\002\"\003U\002\146\003U\003U\007\246\002\146\003U\003U\b:\003U\002\214\006B\003U\003U\003F\003V\003b\007J\003U\002\146\003\190\002&\003U\002\146\003\210\003U\007\202\007\182\004\022\003U\003U\007\022\007R\005\006\002*\003U\002.\003U\004\241\0022\003U\0026\003U\002\146\005\n\005\130\003U\004\241\004\241\006&\004\241\004\241\004\241\004\241\004\241\006\162\006\170\006\178\006\190\002\146\004\241\004\241\004\241\004\241\004\241\006\198\006\206\004\241\007\026\007&\004\241\004\241\004\241\004\241\004\241\004\241\004\241\004\241\004\241\004\241\004\241\007>\004\241\004\241\004\241\007V\004\241\007^\007\130\004\241\004\241\007\138\007\166\007\230\b\n\004\241\bK\000\000\004\241\004\241\000\000\000\000\004\241\000\000\000\000\000\000\004\241\001\205\000\000\000\000\000\000\004\241\004\241\004\241\004\241\0025\004\241\004\241\004\241\004\241\000\000\000\000\000\000\000\000\0025\0025\000\000\0025\0025\0025\0025\0025\000\000\000\000\000\000\000\000\000\000\0025\0025\0025\005\250\0025\000\000\000\000\0025\000\000\000\000\0025\0025\0025\0025\0025\0025\0025\0025\001n\0025\0025\000\000\006\002\0025\0025\000\000\0025\000\000\000\000\0025\0025\000\000\000\000\000\000\000\000\0025\000\000\000\000\0025\0025\000\000\000\000\0025\000\000\000\000\000\000\0025\000\000\000\000\000\000\000\000\0025\0025\0025\0025\001\225\0025\0025\0025\0025\000\000\000\000\000\000\000\000\001\225\001\225\000\000\001\225\001\225\001\225\001\225\001\225\000\000\000\000\000\000\000\000\000\000\001\225\001\225\001\225\006f\001\225\000\000\000\000\001\225\000\000\000\000\001\225\001\225\001\225\001\225\001\225\001\225\001\225\001\225\001n\001\225\001\225\000\000\006n\001\225\001\225\000\000\001\225\000\000\000\000\001\225\001\225\000\000\000\000\000\000\000\000\001\225\000\000\000\000\001\225\001\225\000\000\000\000\001\225\000\000\000\000\000\000\001\225\000\000\000\000\000\000\000\000\001\225\001\225\001\225\001\225\000\000\001\225\001\225\001\225\001\225\002a\002a\002a\000\000\002a\002a\002a\002a\002a\002a\002a\002a\000\000\000\000\000\000\002a\000\000\000\000\000\000\000\000\000\000\002a\002a\002a\000\000\000\000\002a\000\000\000\000\000\000\002a\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\000\000\002a\000\000\000\000\002a\000\000\000\000\002a\002a\000\000\002a\002a\000\000\002a\002a\000\000\000\000\002a\002a\007J\002a\000\000\002a\002a\000\000\000\000\002a\002a\002a\002a\002a\002a\000\000\000\000\000\000\002a\002a\000\000\000\000\000\000\000\000\002a\000\000\000\000\000\000\000\000\001\193\001\193\001\193\002anr\000\000\000\000\000\000\000\000\000\000\003v\000\"\001\245\000\000\000\000\003\130\000\000\000\000\000\000\000*\000.\000\000\003\138\003\146\000\000\000\000\000\000\000\000\000\000\003\162\000\000\000\000\000:\000\000\000\000\003F\000\210\000\000\003\170\003\178\000\000\003\186\003\202\000\000\000\000\007z\003\206\000\000\001\030\000\000\000\000\004\146\000\000\000\000\004\150\001\245\004\158\004\166\004\174\004\178\000\000\000\000\000\000\001\245\004\194\000\000\000\000\003U\003U\004\202\003U\002\nr\000\000\000\000\000\000\000\000\000\000\003v\000\"\001\237\000\000\000\000\003\130\000\000\000\000\000\000\000*\000.\000\000\003\138\003\146\000\000\000\000\000\000\000\000\000\000\003\162\000\000\000\000\000:\000\000\000\000\003F\000\210\000\000\003\170\003\178\000\000\003\186\003\202\000\000\000\000\007z~q\000\000\003\157\000\000\003\157\000\000\000\000\000\000\003\157\003q\003q\000\000\003q\000\000\000\000\003q\003q\003q\000\000\000\000\003q\003q\000\000\003q\003q\000\000\003q\000\000\000\000\003q\000\000\000\000\000\000\003q\000\000\003q\000\000\003q\000\000\003q\000\000\003q\003q\000\000\000\000\003q\001F\000\000\003q\000\000\000\000\003q\003q\000\000\000\000\000\000\000\000\003q\000\000\000\000\000\000\003q\000\000\000\000\001J\000\000\000\000\000\000\003q\003q\000\000\000\000\000\000\000\000\003q\000\000\003q\003u\000\000\003q\000\000\003q\000\000\000\000\000\000\003q\003u\003u\000\000\003u\000\000\000\000\003u\003u\003u\000\000\000\000\003u\003u\000\000\003u\003u\000\000\003u\000\000\000\000\003u\000\000\000\000\000\000\003u\000\000\003u\000\000\003u\000\000\003u\000\000\003u\003u\000\000\000\000\003u\001F\000\000\003u\000\000\000\000\003u\003u\000\000\000\000\000\000\000\000\003u\000\000\000\000\000\000\003u\000\000\000\000\001J\000\000\000\000\000\000\003u\003u\000\000\000\000\000\000\000\000\003u\000\000\003u\003]\000\000\003u\000\000\003u\000\000\000\000\000\000\003u\003]\003]\000\000\003]\000\000\000\000\003]\003]\003]\000\000\000\000\003]\003]\000\000\003]\003]\000\000\003]\000\000\000\000\003]\000\000\000\000\000\000\003]\000\000\003]\000\000\003]\000\000\003]\000\000\003]\003]\000\000\000\000\003]\001F\000\000\003]\000\000\000\000\003]\003]\000\000\000\000\000\000\000\000\003]\000\000\000\000\000\000\003]\000\000\000\000\001J\000\000\000\000\000\000\003]\003]\000\000\000\000\000\000\000\000\003]\000\000\003]\003i\000\000\003]\000\000\003]\000\000\000\000\000\000\003]\003i\003i\000\000\003i\000\000\000\000\003i\003i\003i\000\000\000\000\003i\003i\000\000\003i\003i\000\000\003i\000\000\000\000\003i\000\000\000\000\000\000\003i\000\000\003i\000\000\003i\000\000\003i\000\000\003i\003i\000\000\000\000\003i\001F\000\000\003i\000\000\000\000\003i\003i\000\000\000\000\000\000\000\000\003i\000\000\000\000\000\000\003i\000\000\000\000\001J\000\000\000\000\000\000\003i\003i\000\000\000\000\000\000\000\000\003i\000\000\003i\003m\000\000\003i\000\000\003i\000\000\000\000\000\000\003i\003m\003m\000\000\003m\000\000\000\000\003m\003m\003m\000\000\000\000\003m\003m\000\000\003m\003m\000\000\003m\000\000\000\000\003m\000\000\000\000\000\000\003m\000\000\003m\000\000\003m\000\000\003m\000\000\003m\003m\000\000\000\000\003m\001F\000\000\003m\000\000\000\000\003m\003m\000\000\000\000\000\000\000\000\003m\000\000\000\000\000\000\003m\000\000\000\000\001J\000\000\000\000\000\000\003m\003m\000\000\000\000\000\000\000\000\003m\000\000\003m\003}\000\000\003m\000\000\003m\000\000\000\000\000\000\003m\003}\003}\000\000\003}\000\000\000\000\003}\003}\003}\000\000\000\000\003}\003}\000\000\003}\003}\000\000\003}\000\000\000\000\003}\000\000\000\000\000\000\001\142\000\000\002\162\000\000\003}\000\000\003}\000\000\003}\003}\000\000\000\000\003}\001F\000\000\003}\000\000\000\000\003}\003}\000\000\000\000\000\000\000\000\003}\000\000\000\000\000\000\002\170\000\000\000\000\001J\000\000\000\000\000\000\003}\003}\000\000\000\000\000\000\000\000\003}\000\000\003}\003\133\000\000\003}\000\000\003}\000\000\000\000\000\000\003}\003\133\003\133\000\000\003\133\000\000\000\000\003\133\003\133\003\133\000\000\000\000\003\133\003\133\000\000\003\133\003\133\000\000\003\133\000\000\000\000\003\133\000\000\000\000\000\000\003\133\000\000\003\133\000\000\003\133\000\000\003\133\000\000\003\133\003\133\000\000\000\000\003\133\001F\000\000\003\133\000\000\000\000\003\133\003\133\000\000\000\000\000\000\000\000\003\133\000\000\000\000\000\000\003\133\000\000\000\000\001J\000\000\000\000\000\000\003\133\003\133\000\000\000\000\000\000\000\000\003\133\000\000\003\133\003y\000\000\003\133\000\000\003\133\000\000\000\000\000\000\003\133\003y\003y\000\000\003y\000\000\000\000\003y\003y\003y\000\000\000\000\003y\003y\000\000\003y\003y\000\000\003y\000\000\000\000\003y\000\000\000\000\000\000\001\142\000\000\002\162\000\000\003y\000\000\003y\000\000\003y\003y\000\000\000\000\003y\001F\000\000\003y\000\000\000\000\003y\003y\000\000\000\000\000\000\000\000\003y\000\000\000\000\000\000\002\170\000\000\000\000\001J\000\000\000\000\000\000\003y\003y\000\000\000\000\000\000\000\000\003y\000\000\003y\003e\000\000\003y\000\000\003y\000\000\000\000\000\000\003y\003e\003e\000\000\003e\000\000\000\000\003e\003e\003e\000\000\000\000\003e\003e\000\000\003e\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\003e\000\000\003e\000\000\003e\003e\000\000\000\000\003e\001F\000\000\003e\000\000\000\000\003e\003e\000\000\000\000\000\000\000\000\003e\000\000\000\000\000\000\003e\000\000\000\000\001J\000\000\000\000\000\000\003e\003e\000\000\000\000\000\000\000\000\003e\000\000\003e\003a\000\000\003e\000\000\003e\000\000\000\000\000\000\003e\003a\003a\000\000\003a\000\000\000\000\003a\003a\003a\000\000\000\000\003a\003a\000\000\003a\003a\000\000\003a\000\000\000\000\003a\000\000\000\000\000\000\003a\000\000\003a\000\000\003a\000\000\003a\000\000\003a\003a\000\000\000\000\003a\001F\000\000\003a\000\000\000\000\003a\003a\000\000\000\000\000\000\000\000\003a\000\000\000\000\000\000\003a\000\000\000\000\001J\000\000\000\000\000\000\003a\003a\000\000\000\000\000\000\000\000\003a\000\000\003a\000\000\000\000\003a\000\000\003a\000F\000J\000N\003a\000R\000V\000Z\000^\000b\000f\000j\000n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000*\000v\000\000\000\000\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~\000\000\000\000\000\130\000\134\000\138\000\000\000\000\000\142\000\146\000\150\000\154\000\000\000\158\000\162\000\000\000\000\000\166\000\170\000\000\000\000\000\174\000\178\000\000\000\000\000\182\000\186\000\190\000F\000J\000N\000\000\000R\000V\000Z\000^\000b\000f\000j\000n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\000\000\004i\000\000\000\000\000\000\000\000\000\000\000\000\000*\000v\000\000\000\000\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~~r\003\213\000\000\003\213\000\000\000\000\003\213\000\000\003\213\003\r\003\r\000\000\003\r\000\000\000\000\005\"\005*\000\000\000\000\000\000\000\000\000\000\000\000\0052\003\r\000\000\003\r\000\000\000\000\003\r\000\000\000\000\000\000\005:\000\000\005B\000\000\005J\000\000\005R\000\000\003\r\003\r\000\000\000\000\003\r\001F\000\000\003\r\000\000\000\000\003\r\003\r\000\000\000\000\000\000\000\000\003\r\000\000\000\000\000\000\005Z\000\000\000\000\001J\000\000\000\000\000\000\003\r\000\000\000\000\000\000\000\000\003\249\003\r\000\000\003\r\000\000\000\000\003\r\000\000\003\rrb\002\181\000\000\000\000\000\000\000\000\002\181\000\000\000\000\002\181\002\181\000\165\000\165\002\181\000\000\002\181\000\000\002j\002\181\002z\000\000\000\000\002rb\002\173\000\000\000\000\000\000\000\000\002\173\000\000\000\000\002\173\002\173\002\201\002\201\002\173\000\000\002\173\000\000\002j\002\173\002z\000\000\000\000\002rb\002\185\000\000\000\000\000\000\000\000\002\185\000\000\000\000\002\185\002\185\002\189\002\189\002\185\000\000\002\185\000\000\002\189\002Z\002\189\000\000\000\000\002r\000\000\002\189\000\000\000\000\000\000\002\189\000\000\001\194\001\210\000\000\000\000\001\218\002\193\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\001\186\001\250\002b\002\193\000\000\000\000\000\000\000\000\002\193\000\000\000\000\002\193\002\193\002\185\002\185\002\193\000\000\002\193\000\000\002\185\002Z\002\185\000\000\000\000\002\185\000\000\002\185\000\000\000\000\000\000\002\185\000\000\001\194\001\210\000\000\000\000\001\218\002\197\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\001\186\001\250\002b\002\197\000\000\000\000\000\000\000\000\002\197\000\000\000\000\002\197\002\197\002\193\002\193\002\197\000\000\002\197\000\000\002j\002Z\002\193\000\000\000\000\002r\000\000\002\193\000\000\000\000\000\000\002\193\000\000\001\194\001\210\000\000\000\000\001\218\000\000\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\003\238\003\246\002b\000\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\003\254\000\000\004\030\000\000\002j\004&\002z\000\000\000\000\002r\000\000\002\197\000\000\000\000\000\000\002\197\000\000\004.\0046\000\000\000\000\004>\000\000\000\000\000\173\000\000\000\000\004F\004N\000\000\000\000\002\245\002\245\004V\002\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\173\000\173\002\245\000\000\002\245\000\000\004^\002\245\004f\000\000\000\000\004n\000\000\004vt\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\003\t\000\000\003\t\000\000\002\241\002Z\002\241\000\000\000\000\002\241\000\000\002\241\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\000\000\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\002\237\002\237\002b\002\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\002\237\000\000\002\237\000\000\002j\002\237\002z\000\000\000\000\002rb\003\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\003\001\000\000\003\001\000\000\002\253\002Z\002\253\000\000\000\000\002r\000\000\002\253\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\000\000\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\001\186\001\250\002b\002\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\002\249\000\000\002\249\000\000\002j\002Z\003\001\000\000\000\000\002r\000\000\003\001\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\000\000\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\001\186\001\250\002b\003\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\003\005\000\000\003\005\000\000\002\249\002Z\002\249\000\000\000\000\002\249\000\000\002\249\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\000\181\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\005j\005r\002b\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\005z\000\000\005\138\000\000\002j\005\146\002z\000\000\000\000\002rb\003)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003E\000\000\003)\000\000\003)\000\000\002j\003)\002z\000\000\000\000\002rb\003=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0039\000\000\003=\000\000\003=\000\000\0039\002Z\0039\000\000\000\000\002r\000\000\0039\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\0035\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\001\186\001\250\002b\0035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003=\000\000\0035\000\000\0035\000\000\002j\002Z\003=\000\000\000\000\002r\000\000\003=\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\003A\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\001\186\001\250\002b\003A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0035\000\000\003A\000\000\003A\000\000\0035\002Z\0035\000\000\000\000\0035\000\000\0035\000\000\000\000\000\000\000\000\000\000\001\194\001\210\000\000\000\000\001\218\000\000\000\000\001\226\000\000\000\000\001\234\001\242\000\000\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003A\000\000\000\000\000\000\000\000\000\000\002j\000\000\002z\000\000\000\000\002r\000\000\003A"))
  
  and lhs =
    (8, "\001\000hhgffffeeddccbbbbbbbbbbbba``r\r\r\r\r\r\r\r\r\r\012\011\n\t\b\007\007\006\005\004\003\002")
  
  and goto =
    ((16, "\000\005\000\000\016\242+R+\204\000\000\000\000\000\000\000\000+\254\000\000\000\000,x8\022\017t,\170\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\b\r(\000\000-$-V\000\000\000\026\000\000\000\000\000\000\000\020\000\000\000\028\000\000\000\000\000\000\000\155\000\198\000\000\017\172\000\000-\208.\002.|.\174\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\000+\000\000\r\192\022\130\000\000\000\017/(\000\017/Z\000\017/\212\000\017\000\000\000\000\000\000\000\000\000E\000$\000\000\018.\000\000\028\138\000\000\029\004\000\000\000\000\000\000\0296\000\000\029\176\000\000\029\226\000\000\030\\\000\000\030\142\000\000\031\b\000\000\022\186\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0234\000\000\000\000\000\000\023l\000\000\031:\000\000\031\180\000\000\031\230\000\000 `\000\000 \146\000\000!\012\000\000!>\000\000\000\000\000\000\023\230\000\000\000\000\000\0000\006\000\0170\128\000\0170\178\000\0171,\000\0171^\000\017\000\000\000\000\000\000\000\000\000\000\000\000\r\254\000\000\018f\000\000\000\000\000\000\000\017\000\017\000\017\000\000\005\1301\216\000\017\000<\000=\024\030\000\000\000\000\000D\000\000\000\000\000\0002\n\000\017\000_\002Z\018\232\000\000\000\000\019 \000\000\000\000\000\019\019\162\000\000\003$\000\000\014\128\000\000\000\0002\132\000\0172\182\000\0178(\000\000\000\014\000\00030\000\0173b\000\0173\220\000\017\000\000\019\218\000\000\006L\000\000\000\000\014\184\000\140\000\030\024\160\000\000\000\017\000\000!\184\000\000!\234\000\000\024\216\000@\025f\000\000\000\000\000\000\025\158\000\000\"d\000\000\"\150\000\000#\016\000\000#B\000\000#\188\000\000#\238\000\000$h\000\000$\154\000\000%\020\000\000%F\000\000%\192\000\000%\242\000\000\000\000\000\000\020\\\000\000\007\022\007\2244\014\000\0174\136\000\0174\186\000\017\000\000\0002\000\000\000\000\000\000\000B\000\00054\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000x\000\000\000\000\000\000\000\000\000\000\020\148\000\000\000\000\000\000\000\000\000\2185f\000\0175\224\000\0176\018\000\0176\140\000\0176\190\000\01778\000\0177j\000\0177\228\000\017\000\000\000\000&l\000\000&\158\000\000\026,\000\000\026d\000\000'\024\000\000'J\000\000'\196\000\000'\246\000\000(p\000\000(\162\000\000)\028\000\000)N\000\000)\200\000\000)\250\000\000*t\000\000*\166\000\000+ \000\000\000\000\000L\000\158\000\000\021\022\000\000\000\000\000\000\000b\026\222\000\000\000\000\000\000\b\170\000\000\000\000\000\000\000\000\000\000\000\000\027\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\\000\174\000\000\021N\000\000\000\000\000\000\000\000\000\000\000\000\000\228\000b\000\000\000\000\000\000\000\000\015F\000\000\015~\000\000\tt\000\000\000\000\016\000\000\000\0168\000\000\n>\000\000\000@\021\208\000\000\011\b\000\000\000\000\027\152\000\000\000\000\000\000\011\210\000\000\003\238\000\000\000\000\000A\000\000\004\184\000\000\000\000\000\000\000P\000\000\000R\000\000\000\000\000\000\000\000\000\005\000P\000\000\000\000\000\230\000\000\000R\000\000\000\000\000\150\000\000\000\000\000\000\000\246\000\000\000,\000\000\000\132\000\000\000\000\001\144\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\000\027\208\000\000\000\000\000\000\000\000\000x\000\000\000\000\028R\000\000\000\000\000\000\000\000\000\000\000\000\000l\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000b\000\000\000\017\000\017\000\017\000\017\000\000\012\156\000\000\000\000\000\000\000\000\016\186\000\000\000\000\000\000"), (16, "\0015\0016\000M\0017\001\201\0018\0019\001:\001\235\000\202\001;\001<\001=\001\229\000;\001\230\000?\000;\000;\000<\000?\001F\000N\000T\002\017\001G\000;\001H\000?\000B\001Z\000\205\0001\000A\000;\000\190\000\199\001\209\000;\0003\000\199\000B\000[\000V\000W\001}\001\197\001~\000=\001\203\001\210\000\206\002\018\001!\001\133\000\204\001\136\001\137\001\253\002\000\001\140\000C\001/\001\232\001\141\001\142\001\218\001\143\001\144\000\168\0012\001\147\001\255\001\226\000;\001\166\000\247\002\001\001\148\0003\001\149\000l\001\150\001\205\0010\001\151\001\152\001\165\002\002\001\219\001\168\001\153\0010\001\160\000s\001\204\001\206\001\161\001\253\002\000\000t\0015\0016\000M\0017\000\143\0018\0019\001:\001\166\000\232\001;\001<\001=\001\229\001\220\001\230\002\001\000;\000;\001\164\001\215\001F\000N\001\209\001\209\001G\000;\001H\001\224\001\002\001Z\001\205\001\205\001\167\001\245\001\247\001\212\001\217\001@\001Y\001\132\001\128\001\221\000V\000W\001}\001\134\001~\001\159\001\155\001\228\002\t\001\233\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\001\232\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\229\000\000\001\230\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\001\231\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\001\232\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\001\207\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\001\196\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\001\195\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\001\200\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\191\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\001\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000\000\000\000\000\000\000\000\000\000\000\000\001\148\000\000\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000\000\001\160\000s\000\000\000\000\001\161\000\000\000\000\000t\0015\0016\000M\0017\000\000\0018\0019\001:\000\000\000\000\001;\001<\001=\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000N\000\000\000\000\001G\000\000\001H\000\000\000\000\001Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000W\001}\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\133\000\000\001\136\001\137\000\000\000\000\001\140\000\000\000\000\000\000\001\141\001\142\000\000\001\143\001\144\000\000\000\000\001\147\000M\000\000\000\000\000\000\000\000\000\000\001\148\000^\001\149\000\000\001\150\000\000\000\000\001\151\001\152\000\000\000\000\000\000\000\000\001\153\000N\001\160\000s\000O\000P\001\161\000_\000\000\000t\000\000\000n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\239\001\241\001\244\001\249\000\000\000M\000\000\000\000\000h\000\000\000\000\000i\000^\000\000\000\000\000\144\000\000\000\000\000\000\000j\000\000\000s\000\000\000\180\000\000\000N\001\251\000t\000O\000P\000\000\000_\000\000\000\000\000\000\000n\000M\000\000\000\000\000\000\000\000\000\000\000\000\000^\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\181\000\186\000\000\000N\000\000\000\130\000O\000P\000\000\000_\000\000\000\000\000g\000n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000h\000\000\000\000\000i\000\000\000\130\000\000\000\144\000\000\000\000\000\000\000j\000g\000s\000\000\000\000\000\000\000M\000\183\000t\000\000\000\184\000\000\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\183\000t\000\249\000\184\000\000\000\000\000\223\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000\250\000\000\000\000\000\251\000\000\000\000\000g\000\000\000\000\000\000\000\000\001\175\000\000\000U\000\224\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\001\182\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000\000\000\000\001\187\000\000\000\167\000t\000M\000\000\000\000\000\000\000\000\000\000\000\000\000^\000h\000\000\000\000\000i\000\000\000\000\001\003\000\000\000\000\000\000\000\000\000j\000N\000s\000\000\000O\000P\001\190\000_\000t\000M\000\000\000n\000\000\000\000\000\000\000\000\000^\000\000\000\000\001\170\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\001\172\000U\000\224\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\224\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\001\177\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\001\179\000U\000\224\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\224\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\002\021\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\002\022\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\002\014\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\002\005\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\194\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\163\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\188\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\212\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\215\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\219\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\241\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\001#\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\001D\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\001\130\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\001\157\000\167\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\000\167\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\001\184\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000M\000j\000\000\000s\000\000\000\000\000\000\000^\000\167\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000\144\000_\000\000\000M\000j\000n\000s\000\000\000\000\000\000\000^\001\252\000t\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000M\000j\000\000\000s\000\000\000\000\000\000\000^\000\179\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000\144\000_\000\000\000M\000j\000n\000s\000\000\000\000\000\000\000^\000\146\000t\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000M\000j\000\000\000s\000\000\000\000\000\000\000^\000\145\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000\144\000_\000\000\000M\000j\000n\000s\000\000\000\000\000\000\000^\000\148\000t\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\000\000\166\000t\000\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000\250\000s\000M\000\251\000\000\000\000\000\201\000t\000\249\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\001\001\000\250\000\000\000\000\000\251\000\000\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\001\001\000i\000\000\000\000\001\003\000\000\000\000\000g\000\000\000j\000\000\000s\000\000\000\000\000\000\001 \000\000\000t\000M\000\000\000\000\000\000\000\000\000\000\000\249\000\000\000h\000\000\000\000\000i\000\000\000\000\001\003\000\000\000\000\000\000\000\000\000j\000N\000s\000\000\000O\000P\001\005\000\250\000t\000M\000\251\000\000\000\000\000\000\000\000\000\249\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\001\001\000\250\000\000\000\000\000\251\000\000\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\001\001\000i\000\000\000\000\001\003\000\000\000\000\000g\000\000\000j\000\000\000s\000\000\000\000\000\000\001\004\000\000\000t\000M\000\000\000\000\000\000\000\000\000\000\000\000\000^\000h\000\000\000\000\000i\000\000\000\000\001\003\000\000\000\000\000\000\000\000\000j\000N\000s\000\000\000O\000P\001\007\000_\000t\000M\000\000\000n\000\000\000\000\000\000\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000M\000j\000\000\000s\000\000\000\000\000\000\000^\001`\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000\144\000_\000\000\000M\000j\000n\000s\000\000\000\000\000\000\000^\001b\000t\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\000\000\000\144\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\000\000\001\135\000t\000\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000\250\000s\000M\000\251\000\000\000\000\001\146\000t\000\000\000^\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\001\001\000_\000\000\000\000\000\000\000n\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000\130\000i\000\000\000\000\001\003\000\000\000\000\000g\000\000\000j\000\000\000s\000M\000\000\000\000\001\189\000\000\000t\000\000\000^\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000N\000\144\000\000\000O\000P\000j\000_\000s\000M\000\000\000n\000\000\001\240\000t\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000N\000\000\000\000\000O\000P\000\130\000_\000\000\000\000\000\000\000p\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000h\000\000\000f\000i\000\000\000\000\000\000\000\144\000\000\000g\000M\000j\000\000\000s\000\000\000\000\000\000\000\000\001\248\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000r\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000v\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000x\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000z\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000|\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000~\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000\128\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000\150\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000\152\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000\154\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000\156\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000\158\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000\160\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000\162\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\000\253\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\000\255\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\t\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001\011\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\r\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001\015\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\017\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001\019\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\021\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001\023\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\025\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001\027\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\029\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001\031\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001\\\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001^\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001d\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001f\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001h\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001j\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001l\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001n\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001p\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001r\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001t\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001v\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001x\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000_\000\000\000f\000\000\001z\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000_\000\000\000\000\000j\001|\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\002\r\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\002\012\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\002\011\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\002\n\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\002\004\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\001\237\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001\236\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\193\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\192\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\191\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000Q\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000a\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000c\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000e\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\170\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\172\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\174\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\176\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\178\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\197\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\208\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\226\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\228\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\234\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\236\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\000\238\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001'\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\001)\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001+\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\0014\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001J\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\001L\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001N\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\001P\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001R\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\001T\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\001V\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\000X\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000f\000h\000\000\000\000\000i\000\000\000\000\000g\000M\000\000\000\000\000\000\000j\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000N\000i\000\000\000O\000P\000M\001X\000\000\000\000\000j\000\000\000s\000\000\000\000\000M\000\000\000\000\000t\000\000\000U\000\000\000V\000W\000\000\000X\000N\000Y\000\000\000O\000P\000\000\000\000\000\000\000f\000N\000\000\000\000\000O\000P\000\000\000g\000\000\000\000\000\000\000U\000\000\000V\000W\000\000\002\007\000\000\002\b\000\000\000U\000\000\000V\000W\000\000\000\230\000h\000\231\000\000\000i\000\000\000\000\000g\000\000\000\000\000\000\000\000\000j\000\000\000s\000\000\000g\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000\000\000\000\000\000\000\000\000\000\000h\000\000\000\000\000i\000s\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000s\000\000\000\000\000\000\000\000\000\000\000t"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let arg : 'tv_assignment_expression = Obj.magic arg in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 453 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_arg_ in
        let _v : 'tv_arg = 
# 544 "js_parser.mly"
                                      ( arg, `Spread )
# 461 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let arg : 'tv_assignment_expression = Obj.magic arg in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_arg_ in
        let _v : 'tv_arg = 
# 545 "js_parser.mly"
                             ( arg, `Not_spread )
# 486 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 519 "js_parser.ml"
        ) = Obj.magic _3 in
        let xs : 'tv_loption_separated_nonempty_list_T_COMMA_arg__ = Obj.magic xs in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 525 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arguments = let args =
          let item = 
# 232 "<standard.mly>"
    ( xs )
# 534 "js_parser.ml"
           in
          
# 691 "js_parser.mly"
                                                         ( item )
# 539 "js_parser.ml"
          
        in
        
# 548 "js_parser.mly"
                                                    ( args )
# 545 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi;
              MenhirLib.EngineTypes.startp = _startpos_pi_;
              MenhirLib.EngineTypes.endp = _endpos_pi_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 578 "js_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_elison = Obj.magic _2 in
        let pi : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 584 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_array_literal = 
# 510 "js_parser.mly"
     ( (pi, J.EArr _2) )
# 592 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 619 "js_parser.ml"
        ) = Obj.magic _2 in
        let pi : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 624 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_array_literal = 
# 512 "js_parser.mly"
     ( (pi, J.EArr []) )
# 632 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi;
              MenhirLib.EngineTypes.startp = _startpos_pi_;
              MenhirLib.EngineTypes.endp = _endpos_pi_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 665 "js_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_element_list = Obj.magic _2 in
        let pi : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 671 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_array_literal = 
# 514 "js_parser.mly"
     ( (pi, J.EArr _2) )
# 679 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = pi;
                MenhirLib.EngineTypes.startp = _startpos_pi_;
                MenhirLib.EngineTypes.endp = _endpos_pi_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 718 "js_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_elison_rev = Obj.magic _3 in
        let _2 : 'tv_element_list_rev = Obj.magic _2 in
        let pi : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 725 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_array_literal = 
# 516 "js_parser.mly"
     ( (pi, J.EArr (List.rev_append _2 (List.rev _3))) )
# 733 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_expression = 
# 315 "js_parser.mly"
                          ( _1 )
# 758 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : 'tv_assignment_operator = Obj.magic _2 in
        let _1 : 'tv_left_hand_side_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assignment_expression = 
# 317 "js_parser.mly"
   ( J.EBin (_2, _1, _3) )
# 797 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression_no_in = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_expression_no_in = 
# 399 "js_parser.mly"
                                ( _1 )
# 822 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression_no_in = Obj.magic _3 in
        let _2 : 'tv_assignment_operator = Obj.magic _2 in
        let _1 : 'tv_left_hand_side_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assignment_expression_no_in = 
# 401 "js_parser.mly"
     ( J.EBin(_2,_1,_3) )
# 861 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_expression_no_statement = 
# 423 "js_parser.mly"
                                       ( _1 )
# 886 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : 'tv_assignment_operator = Obj.magic _2 in
        let _1 : 'tv_left_hand_side_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assignment_expression_no_statement = 
# 425 "js_parser.mly"
   ( J.EBin (_2,_1,_3) )
# 925 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 946 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 672 "js_parser.mly"
                    ( J.Eq )
# 954 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 975 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 673 "js_parser.mly"
                    ( J.StarEq )
# 983 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1004 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 674 "js_parser.mly"
                    ( J.SlashEq )
# 1012 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1033 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 675 "js_parser.mly"
                    ( J.ModEq )
# 1041 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1062 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 676 "js_parser.mly"
                    ( J.PlusEq )
# 1070 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1091 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 677 "js_parser.mly"
                    ( J.MinusEq )
# 1099 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1120 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 678 "js_parser.mly"
                    ( J.LslEq )
# 1128 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1149 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 679 "js_parser.mly"
                    ( J.AsrEq )
# 1157 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1178 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 680 "js_parser.mly"
                    ( J.LsrEq )
# 1186 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1207 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 681 "js_parser.mly"
                    ( J.BandEq )
# 1215 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1236 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 682 "js_parser.mly"
                    ( J.BxorEq )
# 1244 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 1265 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 683 "js_parser.mly"
                    ( J.BorEq )
# 1273 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = block;
          MenhirLib.EngineTypes.startp = _startpos_block_;
          MenhirLib.EngineTypes.endp = _endpos_block_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let block : 'tv_curly_block_list_statement__ = Obj.magic block in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_block_ in
        let _endpos = _endpos_block_ in
        let _v : 'tv_block = 
# 191 "js_parser.mly"
   ( let statements, _, _ = block in statements )
# 1298 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pi;
          MenhirLib.EngineTypes.startp = _startpos_pi_;
          MenhirLib.EngineTypes.endp = _endpos_pi_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 1319 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_pi_ in
        let _v : 'tv_boolean_literal = 
# 485 "js_parser.mly"
              ( (pi, J.EBool true) )
# 1327 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pi;
          MenhirLib.EngineTypes.startp = _startpos_pi_;
          MenhirLib.EngineTypes.endp = _endpos_pi_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 1348 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_pi_ in
        let _v : 'tv_boolean_literal = 
# 486 "js_parser.mly"
              ( (pi, J.EBool false) )
# 1356 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_label_ = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 1384 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_break_statement = 
# 249 "js_parser.mly"
                     ( (J.Break_statement _2, J.Pi pi) )
# 1392 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_arguments = Obj.magic _2 in
        let _1 : 'tv_member_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_call_expression = 
# 352 "js_parser.mly"
     ( let (start, e) = _1 in (start, J.ECall(e, _2, J.Pi start)) )
# 1424 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_arguments = Obj.magic _2 in
        let _1 : 'tv_call_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_call_expression = 
# 354 "js_parser.mly"
     ( let (start, e) = _1 in (start, J.ECall(e, _2, J.Pi start)) )
# 1456 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1495 "js_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1501 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_call_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_call_expression = 
# 356 "js_parser.mly"
     ( let (start, e) = _1 in (start, J.EAccess (e, _3)) )
# 1510 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_identifier_or_kw = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1544 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_call_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_call_expression = 
# 358 "js_parser.mly"
     ( let (start, e) = _1 in (start, J.EDot (e, _3)) )
# 1553 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_arguments = Obj.magic _2 in
        let _1 : 'tv_member_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_call_expression_no_statement = 
# 459 "js_parser.mly"
   ( let (start, e) = _1 in (start, J.ECall(e, _2, J.Pi start)) )
# 1585 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_arguments = Obj.magic _2 in
        let _1 : 'tv_call_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_call_expression_no_statement = 
# 461 "js_parser.mly"
   ( let (start, e) = _1 in (start, J.ECall(e, _2, J.Pi start)) )
# 1617 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1656 "js_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1662 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_call_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_call_expression_no_statement = 
# 463 "js_parser.mly"
   ( let (start, e) = _1 in (start, J.EAccess(e, _3)) )
# 1671 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_identifier_or_kw = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1705 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_call_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_call_expression_no_statement = 
# 465 "js_parser.mly"
   ( let (start, e) = _1 in (start, J.EDot(e,_3)) )
# 1714 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let y : 'tv_list_statement_ = Obj.magic y in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 1754 "js_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 1760 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_case_clause = let pair = 
# 175 "<standard.mly>"
    ( (x, y) )
# 1768 "js_parser.ml"
         in
        
# 285 "js_parser.mly"
                                                               ( pair )
# 1773 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = item;
              MenhirLib.EngineTypes.startp = _startpos_item_;
              MenhirLib.EngineTypes.endp = _endpos_item_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let y : 'tv_block = Obj.magic y in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1819 "js_parser.ml"
        ) = Obj.magic _3 in
        let item : 'tv_variable = Obj.magic item in
        let _1_inlined1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 1825 "js_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 1830 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_catch = let pair =
          let x = 
# 691 "js_parser.mly"
                                                         ( item )
# 1839 "js_parser.ml"
           in
          
# 167 "<standard.mly>"
    ( (x, y) )
# 1844 "js_parser.ml"
          
        in
        
# 275 "js_parser.mly"
                                                     ( pair )
# 1850 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_post_in_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression = 
# 324 "js_parser.mly"
                      ( _1 )
# 1875 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_ternary_post_in_expression_assignment_expression_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression = 
# 325 "js_parser.mly"
                                                      ( _1 )
# 1900 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_post_in_expression_no_in = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression_no_in = 
# 404 "js_parser.mly"
                            ( _1 )
# 1925 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_ternary_post_in_expression_no_in_assignment_expression_no_in_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression_no_in = 
# 405 "js_parser.mly"
                                                                  ( _1 )
# 1950 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_post_in_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression_no_statement = 
# 428 "js_parser.mly"
                                   ( _1 )
# 1975 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_ternary_post_in_expression_no_statement_assignment_expression_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression_no_statement = 
# 429 "js_parser.mly"
                                                                   ( _1 )
# 2000 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_label_ = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 2028 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_continue_statement = 
# 246 "js_parser.mly"
                        ( (J.Continue_statement _2,J.Pi pi) )
# 2036 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pi2;
          MenhirLib.EngineTypes.startp = _startpos_pi2_;
          MenhirLib.EngineTypes.endp = _endpos_pi2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi1;
              MenhirLib.EngineTypes.startp = _startpos_pi1_;
              MenhirLib.EngineTypes.endp = _endpos_pi1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let pi2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2069 "js_parser.ml"
        ) = Obj.magic pi2 in
        let x : 'tv_empty = Obj.magic x in
        let pi1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2075 "js_parser.ml"
        ) = Obj.magic pi1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi1_ in
        let _endpos = _endpos_pi2_ in
        let _v : 'tv_curly_block_empty_ = 
# 618 "js_parser.mly"
                                 ( (x, pi1, pi2) )
# 2083 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pi2;
          MenhirLib.EngineTypes.startp = _startpos_pi2_;
          MenhirLib.EngineTypes.endp = _endpos_pi2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi1;
              MenhirLib.EngineTypes.startp = _startpos_pi1_;
              MenhirLib.EngineTypes.endp = _endpos_pi1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let pi2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2116 "js_parser.ml"
        ) = Obj.magic pi2 in
        let x : 'tv_list_source_element_ = Obj.magic x in
        let pi1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2122 "js_parser.ml"
        ) = Obj.magic pi1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi1_ in
        let _endpos = _endpos_pi2_ in
        let _v : 'tv_curly_block_list_source_element__ = 
# 618 "js_parser.mly"
                                 ( (x, pi1, pi2) )
# 2130 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pi2;
          MenhirLib.EngineTypes.startp = _startpos_pi2_;
          MenhirLib.EngineTypes.endp = _endpos_pi2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi1;
              MenhirLib.EngineTypes.startp = _startpos_pi1_;
              MenhirLib.EngineTypes.endp = _endpos_pi1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let pi2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2163 "js_parser.ml"
        ) = Obj.magic pi2 in
        let x : 'tv_list_statement_ = Obj.magic x in
        let pi1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2169 "js_parser.ml"
        ) = Obj.magic pi1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi1_ in
        let _endpos = _endpos_pi2_ in
        let _v : 'tv_curly_block_list_statement__ = 
# 618 "js_parser.mly"
                                 ( (x, pi1, pi2) )
# 2177 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pi2;
          MenhirLib.EngineTypes.startp = _startpos_pi2_;
          MenhirLib.EngineTypes.endp = _endpos_pi2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi1;
              MenhirLib.EngineTypes.startp = _startpos_pi1_;
              MenhirLib.EngineTypes.endp = _endpos_pi1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let pi2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2210 "js_parser.ml"
        ) = Obj.magic pi2 in
        let x : 'tv_separated_or_terminated_list_T_COMMA_object_key_value_ = Obj.magic x in
        let pi1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2216 "js_parser.ml"
        ) = Obj.magic pi1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi1_ in
        let _endpos = _endpos_pi2_ in
        let _v : 'tv_curly_block_separated_or_terminated_list_T_COMMA_object_key_value__ = 
# 618 "js_parser.mly"
                                 ( (x, pi1, pi2) )
# 2224 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pi;
          MenhirLib.EngineTypes.startp = _startpos_pi_;
          MenhirLib.EngineTypes.endp = _endpos_pi_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 2245 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_pi_ in
        let _v : 'tv_debugger_statement = 
# 204 "js_parser.mly"
                 ( J.Debugger_statement, J.Pi pi )
# 2253 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let list : 'tv_list_statement_ = Obj.magic list in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 2287 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 2292 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_default_clause = 
# 288 "js_parser.mly"
                                     ( list )
# 2300 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__3_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__3_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = item;
            MenhirLib.EngineTypes.startp = _startpos_item_;
            MenhirLib.EngineTypes.endp = _endpos_item_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = body;
                  MenhirLib.EngineTypes.startp = _startpos_body_;
                  MenhirLib.EngineTypes.endp = _endpos_body_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = pi;
                    MenhirLib.EngineTypes.startp = _startpos_pi_;
                    MenhirLib.EngineTypes.endp = _endpos_pi_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _3_inlined1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2351 "js_parser.ml"
        ) = Obj.magic _3_inlined1 in
        let item : 'tv_expression = Obj.magic item in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2357 "js_parser.ml"
        ) = Obj.magic _1 in
        let _3 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 2362 "js_parser.ml"
        ) = Obj.magic _3 in
        let body : 'tv_statement = Obj.magic body in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 2368 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__3_inlined1_ in
        let _v : 'tv_do_while_statement = let condition = 
# 691 "js_parser.mly"
                                                         ( item )
# 2376 "js_parser.ml"
         in
        
# 217 "js_parser.mly"
    ( (J.Do_while_statement (body, condition), J.Pi pi) )
# 2381 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2402 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_either_T_SEMICOLON_T_VIRTUAL_SEMICOLON_ = 
# 687 "js_parser.mly"
                ( _1 )
# 2410 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 98 "js_parser.mly"
       (Parse_info.t)
# 2431 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_either_T_SEMICOLON_T_VIRTUAL_SEMICOLON_ = 
# 687 "js_parser.mly"
                           ( _1 )
# 2439 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_element_list_rev = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_element_list = 
# 519 "js_parser.mly"
                    ( List.rev _1 )
# 2464 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_assignment_expression = Obj.magic _2 in
        let _1 : 'tv_elison_rev = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_element_list_rev = 
# 522 "js_parser.mly"
                                    ( (Some _2)::_1 )
# 2496 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_element_list_rev = 
# 523 "js_parser.mly"
                                    ( [Some _1] )
# 2521 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : 'tv_elison = Obj.magic _2 in
        let _1 : 'tv_element_list_rev = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_element_list_rev = 
# 524 "js_parser.mly"
                                                 ( (Some _3) :: (List.rev_append _2 _1) )
# 2560 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_elison_rev = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_elison = 
# 614 "js_parser.mly"
                   (_1)
# 2585 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2606 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_elison_rev = 
# 611 "js_parser.mly"
           ( [] )
# 2614 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2641 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_elison = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_elison_rev = 
# 612 "js_parser.mly"
                  ( None :: _1 )
# 2650 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_empty = 
# 689 "js_parser.mly"
       ()
# 2668 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pi;
          MenhirLib.EngineTypes.startp = _startpos_pi_;
          MenhirLib.EngineTypes.endp = _endpos_pi_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pi : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2689 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_pi_ in
        let _v : 'tv_empty_statement = 
# 201 "js_parser.mly"
                  ( J.Empty_statement, J.Pi pi )
# 2697 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression = 
# 311 "js_parser.mly"
                         ( _1 )
# 2722 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2756 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_expression = 
# 312 "js_parser.mly"
                                            ( J.ESeq (_1, _3) )
# 2765 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression_no_in = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression_no_in = 
# 395 "js_parser.mly"
                               ( _1 )
# 2790 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression_no_in = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2824 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expression_no_in = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_expression_no_in = 
# 396 "js_parser.mly"
                                                        ( J.ESeq (_1, _3) )
# 2833 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression_no_statement = 
# 419 "js_parser.mly"
                                      ( _1 )
# 2858 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 2892 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_expression_no_statement = 
# 420 "js_parser.mly"
                                                         ( J.ESeq(_1,_3) )
# 2901 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression_statement = 
# 207 "js_parser.mly"
                           ( J.Expression_statement _1, J.N )
# 2926 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_block = Obj.magic _2 in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 2954 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_finally = 
# 278 "js_parser.mly"
                   ( _2 )
# 2962 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = right;
              MenhirLib.EngineTypes.startp = _startpos_right_;
              MenhirLib.EngineTypes.endp = _endpos_right_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = left;
                  MenhirLib.EngineTypes.startp = _startpos_left_;
                  MenhirLib.EngineTypes.endp = _endpos_left_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = pi;
                      MenhirLib.EngineTypes.startp = _startpos_pi_;
                      MenhirLib.EngineTypes.endp = _endpos_pi_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let body : 'tv_statement = Obj.magic body in
        let _6 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3020 "js_parser.ml"
        ) = Obj.magic _6 in
        let right : 'tv_expression = Obj.magic right in
        let _4 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 3026 "js_parser.ml"
        ) = Obj.magic _4 in
        let left : 'tv_left_hand_side_expression = Obj.magic left in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3032 "js_parser.ml"
        ) = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3037 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_body_ in
        let _v : 'tv_for_in_statement = 
# 237 "js_parser.mly"
   ( J.ForIn_statement (J.Left left, right, body), J.Pi pi )
# 3045 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = right;
              MenhirLib.EngineTypes.startp = _startpos_right_;
              MenhirLib.EngineTypes.endp = _endpos_right_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = y;
                  MenhirLib.EngineTypes.startp = _startpos_y_;
                  MenhirLib.EngineTypes.endp = _endpos_y_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = pi;
                          MenhirLib.EngineTypes.startp = _startpos_pi_;
                          MenhirLib.EngineTypes.endp = _endpos_pi_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let body : 'tv_statement = Obj.magic body in
        let _7 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3115 "js_parser.ml"
        ) = Obj.magic _7 in
        let right : 'tv_expression = Obj.magic right in
        let _5 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 3121 "js_parser.ml"
        ) = Obj.magic _5 in
        let y : 'tv_option_initializer_no_in_ = Obj.magic y in
        let x : 'tv_variable = Obj.magic x in
        let _3 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3128 "js_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3133 "js_parser.ml"
        ) = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3138 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_body_ in
        let _v : 'tv_for_in_statement = let left = 
# 167 "<standard.mly>"
    ( (x, y) )
# 3146 "js_parser.ml"
         in
        
# 240 "js_parser.mly"
   ( J.ForIn_statement (J.Right left, right, body), J.Pi pi )
# 3151 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = statement;
          MenhirLib.EngineTypes.startp = _startpos_statement_;
          MenhirLib.EngineTypes.endp = _endpos_statement_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = increment;
              MenhirLib.EngineTypes.startp = _startpos_increment_;
              MenhirLib.EngineTypes.endp = _endpos_increment_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = condition;
                  MenhirLib.EngineTypes.startp = _startpos_condition_;
                  MenhirLib.EngineTypes.endp = _endpos_condition_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = initial;
                      MenhirLib.EngineTypes.startp = _startpos_initial_;
                      MenhirLib.EngineTypes.endp = _endpos_initial_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = pi;
                          MenhirLib.EngineTypes.startp = _startpos_pi_;
                          MenhirLib.EngineTypes.endp = _endpos_pi_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let statement : 'tv_statement = Obj.magic statement in
        let _8 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3221 "js_parser.ml"
        ) = Obj.magic _8 in
        let increment : 'tv_option_expression_ = Obj.magic increment in
        let _6 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3227 "js_parser.ml"
        ) = Obj.magic _6 in
        let condition : 'tv_option_expression_ = Obj.magic condition in
        let _4 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3233 "js_parser.ml"
        ) = Obj.magic _4 in
        let initial : 'tv_option_expression_no_in_ = Obj.magic initial in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3239 "js_parser.ml"
        ) = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3244 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_statement_ in
        let _v : 'tv_for_statement = 
# 227 "js_parser.mly"
   ( J.For_statement (J.Left initial, condition, increment, statement), J.Pi pi )
# 3252 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = statement;
          MenhirLib.EngineTypes.startp = _startpos_statement_;
          MenhirLib.EngineTypes.endp = _endpos_statement_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = increment;
              MenhirLib.EngineTypes.startp = _startpos_increment_;
              MenhirLib.EngineTypes.endp = _endpos_increment_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = condition;
                  MenhirLib.EngineTypes.startp = _startpos_condition_;
                  MenhirLib.EngineTypes.endp = _endpos_condition_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = initial;
                      MenhirLib.EngineTypes.startp = _startpos_initial_;
                      MenhirLib.EngineTypes.endp = _endpos_initial_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = pi;
                            MenhirLib.EngineTypes.startp = _startpos_pi_;
                            MenhirLib.EngineTypes.endp = _endpos_pi_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let statement : 'tv_statement = Obj.magic statement in
        let _9 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3328 "js_parser.ml"
        ) = Obj.magic _9 in
        let increment : 'tv_option_expression_ = Obj.magic increment in
        let _7 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3334 "js_parser.ml"
        ) = Obj.magic _7 in
        let condition : 'tv_option_expression_ = Obj.magic condition in
        let _5 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3340 "js_parser.ml"
        ) = Obj.magic _5 in
        let initial : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer_no_in___ = Obj.magic initial in
        let _3 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3346 "js_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3351 "js_parser.ml"
        ) = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3356 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_statement_ in
        let _v : 'tv_for_statement = 
# 232 "js_parser.mly"
   ( J.For_statement (J.Right initial, condition, increment, statement), J.Pi pi )
# 3364 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = block;
          MenhirLib.EngineTypes.startp = _startpos_block_;
          MenhirLib.EngineTypes.endp = _endpos_block_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = name;
                  MenhirLib.EngineTypes.startp = _startpos_name_;
                  MenhirLib.EngineTypes.endp = _endpos_name_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = pi;
                    MenhirLib.EngineTypes.startp = _startpos_pi_;
                    MenhirLib.EngineTypes.endp = _endpos_pi_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let block : 'tv_curly_block_list_source_element__ = Obj.magic block in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3416 "js_parser.ml"
        ) = Obj.magic _3 in
        let xs : 'tv_loption_separated_nonempty_list_T_COMMA_variable__ = Obj.magic xs in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3422 "js_parser.ml"
        ) = Obj.magic _1 in
        let name : 'tv_variable = Obj.magic name in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3428 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_block_ in
        let _v : 'tv_function_declaration = let args =
          let item = 
# 232 "<standard.mly>"
    ( xs )
# 3437 "js_parser.ml"
           in
          
# 691 "js_parser.mly"
                                                         ( item )
# 3442 "js_parser.ml"
          
        in
        
# 297 "js_parser.mly"
   ( let elements, _pi_start, pi_end = block in
     (name, args, elements, J.Pi pi_end), J.Pi pi )
# 3449 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = block;
          MenhirLib.EngineTypes.startp = _startpos_block_;
          MenhirLib.EngineTypes.endp = _endpos_block_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = name;
                  MenhirLib.EngineTypes.startp = _startpos_name_;
                  MenhirLib.EngineTypes.endp = _endpos_name_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = pi;
                    MenhirLib.EngineTypes.startp = _startpos_pi_;
                    MenhirLib.EngineTypes.endp = _endpos_pi_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let block : 'tv_curly_block_list_source_element__ = Obj.magic block in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3501 "js_parser.ml"
        ) = Obj.magic _3 in
        let xs : 'tv_loption_separated_nonempty_list_T_COMMA_variable__ = Obj.magic xs in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 3507 "js_parser.ml"
        ) = Obj.magic _1 in
        let name : 'tv_option_variable_ = Obj.magic name in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3513 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_block_ in
        let _v : 'tv_function_expression = let args =
          let item = 
# 232 "<standard.mly>"
    ( xs )
# 3522 "js_parser.ml"
           in
          
# 691 "js_parser.mly"
                                                         ( item )
# 3527 "js_parser.ml"
          
        in
        
# 303 "js_parser.mly"
   ( let elements, _pi_start, _pi_end = block in
     pi, J.EFun (name, args, elements, J.Pi pi) )
# 3534 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 48 "js_parser.mly"
      (string * Parse_info.t)
# 3555 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 559 "js_parser.mly"
                  ( fst _1 )
# 3563 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3584 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 560 "js_parser.mly"
             ( "catch" )
# 3592 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3613 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 561 "js_parser.mly"
               ( "finally" )
# 3621 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 3642 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 562 "js_parser.mly"
          ( "in" )
# 3650 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 3671 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 563 "js_parser.mly"
                  ( "instanceof" )
# 3679 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 59 "js_parser.mly"
       (Parse_info.t)
# 3700 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 564 "js_parser.mly"
            ( "else" )
# 3708 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3729 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 565 "js_parser.mly"
             ( "while" )
# 3737 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3758 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 566 "js_parser.mly"
             ( "break" )
# 3766 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3787 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 567 "js_parser.mly"
            ( "case" )
# 3795 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3816 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 568 "js_parser.mly"
                ( "continue" )
# 3824 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3845 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 569 "js_parser.mly"
               ( "default" )
# 3853 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 3874 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 570 "js_parser.mly"
              ( "delete" )
# 3882 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3903 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 571 "js_parser.mly"
          ( "do" )
# 3911 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3932 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 572 "js_parser.mly"
           ( "for" )
# 3940 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3961 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 573 "js_parser.mly"
                ( "function" )
# 3969 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 3990 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 574 "js_parser.mly"
          ( "if" )
# 3998 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 61 "js_parser.mly"
       (Parse_info.t)
# 4019 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 575 "js_parser.mly"
           ( "new" )
# 4027 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4048 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 576 "js_parser.mly"
              ( "return" )
# 4056 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4077 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 577 "js_parser.mly"
              ( "switch" )
# 4085 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4106 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 578 "js_parser.mly"
            ( "this" )
# 4114 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4135 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 579 "js_parser.mly"
             ( "throw" )
# 4143 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4164 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 580 "js_parser.mly"
           ( "try" )
# 4172 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 4193 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 581 "js_parser.mly"
              ( "typeof" )
# 4201 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4222 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 582 "js_parser.mly"
           ( "var" )
# 4230 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 4251 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 583 "js_parser.mly"
            ( "void" )
# 4259 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4280 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 584 "js_parser.mly"
             ( "while" )
# 4288 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4309 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 585 "js_parser.mly"
            ( "with" )
# 4317 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4338 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 586 "js_parser.mly"
            ( "null" )
# 4346 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4367 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 587 "js_parser.mly"
             ( "false" )
# 4375 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4396 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 588 "js_parser.mly"
            ( "true" )
# 4404 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4425 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_identifier_or_kw = 
# 589 "js_parser.mly"
                ( "debugger" )
# 4433 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = item;
                  MenhirLib.EngineTypes.startp = _startpos_item_;
                  MenhirLib.EngineTypes.endp = _endpos_item_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = pi;
                      MenhirLib.EngineTypes.startp = _startpos_pi_;
                      MenhirLib.EngineTypes.endp = _endpos_pi_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : 'tv_statement = Obj.magic e in
        let _4 : (
# 59 "js_parser.mly"
       (Parse_info.t)
# 4491 "js_parser.ml"
        ) = Obj.magic _4 in
        let t : 'tv_statement = Obj.magic t in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 4497 "js_parser.ml"
        ) = Obj.magic _3 in
        let item : 'tv_expression = Obj.magic item in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 4503 "js_parser.ml"
        ) = Obj.magic _1 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4508 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_if_statement = let condition = 
# 691 "js_parser.mly"
                                                         ( item )
# 4516 "js_parser.ml"
         in
        
# 211 "js_parser.mly"
     ( (J.If_statement (condition, t, Some e), J.Pi pi) )
# 4521 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = item;
              MenhirLib.EngineTypes.startp = _startpos_item_;
              MenhirLib.EngineTypes.endp = _endpos_item_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pi;
                  MenhirLib.EngineTypes.startp = _startpos_pi_;
                  MenhirLib.EngineTypes.endp = _endpos_pi_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let t : 'tv_statement = Obj.magic t in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 4567 "js_parser.ml"
        ) = Obj.magic _3 in
        let item : 'tv_expression = Obj.magic item in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 4573 "js_parser.ml"
        ) = Obj.magic _1 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 4578 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_if_statement = let condition = 
# 691 "js_parser.mly"
                                                         ( item )
# 4586 "js_parser.ml"
         in
        
# 213 "js_parser.mly"
     ( (J.If_statement (condition, t, None), J.Pi pi) )
# 4591 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_assignment_expression = Obj.magic e in
        let pi : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 4619 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_initializer_ = 
# 198 "js_parser.mly"
                                       ( e, J.Pi pi )
# 4627 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_assignment_expression_no_in = Obj.magic _2 in
        let _1 : (
# 74 "js_parser.mly"
       (Parse_info.t)
# 4655 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initializer_no_in = 
# 243 "js_parser.mly"
                                        ( _2, J.Pi _1 )
# 4663 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 48 "js_parser.mly"
      (string * Parse_info.t)
# 4684 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_label = 
# 598 "js_parser.mly"
                ( J.Label.of_string (fst _1) )
# 4692 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let s : 'tv_statement = Obj.magic s in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 4726 "js_parser.ml"
        ) = Obj.magic _2 in
        let l : 'tv_label = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_labeled_statement = 
# 187 "js_parser.mly"
                              ( J.Labelled_statement (l, s), J.N )
# 4735 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_new_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_left_hand_side_expression = 
# 320 "js_parser.mly"
                   ( snd _1 )
# 4760 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_call_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_left_hand_side_expression = 
# 321 "js_parser.mly"
                   ( snd _1 )
# 4785 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_new_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_left_hand_side_expression_no_statement = 
# 450 "js_parser.mly"
                               ( snd _1 )
# 4810 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_call_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_left_hand_side_expression_no_statement = 
# 451 "js_parser.mly"
                                ( snd _1 )
# 4835 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_case_clause_ = 
# 211 "<standard.mly>"
    ( [] )
# 4853 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : 'tv_list_case_clause_ = Obj.magic xs in
        let x : 'tv_case_clause = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_case_clause_ = 
# 213 "<standard.mly>"
    ( x :: xs )
# 4885 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_source_element_ = 
# 211 "<standard.mly>"
    ( [] )
# 4903 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : 'tv_list_source_element_ = Obj.magic xs in
        let x : 'tv_source_element = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_source_element_ = 
# 213 "<standard.mly>"
    ( x :: xs )
# 4935 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_statement_ = 
# 211 "<standard.mly>"
    ( [] )
# 4953 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : 'tv_list_statement_ = Obj.magic xs in
        let x : 'tv_statement = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_statement_ = 
# 213 "<standard.mly>"
    ( x :: xs )
# 4985 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_loption_separated_nonempty_list_T_COMMA_arg__ = 
# 142 "<standard.mly>"
    ( [] )
# 5003 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_separated_nonempty_list_T_COMMA_arg_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_separated_nonempty_list_T_COMMA_arg__ = 
# 144 "<standard.mly>"
    ( x )
# 5028 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_loption_separated_nonempty_list_T_COMMA_variable__ = 
# 142 "<standard.mly>"
    ( [] )
# 5046 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_separated_nonempty_list_T_COMMA_variable_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_separated_nonempty_list_T_COMMA_variable__ = 
# 144 "<standard.mly>"
    ( x )
# 5071 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : 'tv_primary_expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_member_expression = 
# 366 "js_parser.mly"
     ( e )
# 5096 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e2;
            MenhirLib.EngineTypes.startp = _startpos_e2_;
            MenhirLib.EngineTypes.endp = _endpos_e2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 5135 "js_parser.ml"
        ) = Obj.magic _4 in
        let e2 : 'tv_expression = Obj.magic e2 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 5141 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_member_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_member_expression = 
# 368 "js_parser.mly"
     ( let (start, e1) = _1 in (start, J.EAccess (e1,e2)) )
# 5150 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_identifier_or_kw = Obj.magic i in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 5184 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_member_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_member_expression = 
# 370 "js_parser.mly"
     ( let (start, e1) = _1 in (start, J.EDot(e1,i)) )
# 5193 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e1;
            MenhirLib.EngineTypes.startp = _startpos_e1_;
            MenhirLib.EngineTypes.endp = _endpos_e1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi;
              MenhirLib.EngineTypes.startp = _startpos_pi_;
              MenhirLib.EngineTypes.endp = _endpos_pi_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let a : 'tv_arguments = Obj.magic a in
        let e1 : 'tv_member_expression = Obj.magic e1 in
        let pi : (
# 61 "js_parser.mly"
       (Parse_info.t)
# 5228 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_a_ in
        let _v : 'tv_member_expression = 
# 372 "js_parser.mly"
     ( (pi, J.ENew(snd e1, Some a)) )
# 5236 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : 'tv_primary_expression_no_statement = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_member_expression_no_statement = 
# 469 "js_parser.mly"
   ( e )
# 5261 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e2;
            MenhirLib.EngineTypes.startp = _startpos_e2_;
            MenhirLib.EngineTypes.endp = _endpos_e2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 5300 "js_parser.ml"
        ) = Obj.magic _4 in
        let e2 : 'tv_expression = Obj.magic e2 in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 5306 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_member_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_member_expression_no_statement = 
# 471 "js_parser.mly"
   ( let (start, e1) = _1 in (start, J.EAccess(e1, e2)) )
# 5315 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_identifier_or_kw = Obj.magic i in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 5349 "js_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_member_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_member_expression_no_statement = 
# 473 "js_parser.mly"
   ( let (start, e1) = _1 in (start, J.EDot(e1,i)) )
# 5358 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi;
              MenhirLib.EngineTypes.startp = _startpos_pi_;
              MenhirLib.EngineTypes.endp = _endpos_pi_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let a : 'tv_arguments = Obj.magic a in
        let e : 'tv_member_expression = Obj.magic e in
        let pi : (
# 61 "js_parser.mly"
       (Parse_info.t)
# 5393 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_a_ in
        let _v : 'tv_member_expression_no_statement = 
# 475 "js_parser.mly"
   ( (pi, J.ENew(snd e,Some a)) )
# 5401 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_member_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_new_expression = 
# 361 "js_parser.mly"
                        ( _1 )
# 5426 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_new_expression = Obj.magic _2 in
        let pi : (
# 61 "js_parser.mly"
       (Parse_info.t)
# 5454 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_new_expression = 
# 362 "js_parser.mly"
                           ( (pi, J.ENew (snd _2,None)) )
# 5462 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_member_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_new_expression_no_statement = 
# 454 "js_parser.mly"
                                  ( _1 )
# 5487 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_new_expression = Obj.magic _2 in
        let pi : (
# 61 "js_parser.mly"
       (Parse_info.t)
# 5515 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_new_expression_no_statement = 
# 455 "js_parser.mly"
                           ( (pi, J.ENew (snd _2,None)) )
# 5523 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pi;
          MenhirLib.EngineTypes.startp = _startpos_pi_;
          MenhirLib.EngineTypes.endp = _endpos_pi_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 5544 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_pi_ in
        let _v : 'tv_null_literal = 
# 482 "js_parser.mly"
             ( (pi, J.EVar (var pi "null")) )
# 5552 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 47 "js_parser.mly"
      (string * Parse_info.t)
# 5573 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_numeric_literal = 
# 489 "js_parser.mly"
            ( let (f, pi) = _1 in (pi, f) )
# 5581 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let y : 'tv_assignment_expression = Obj.magic y in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 5615 "js_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_property_name = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_object_key_value = let pair = 
# 175 "<standard.mly>"
    ( (x, y) )
# 5624 "js_parser.ml"
         in
        
# 533 "js_parser.mly"
                                                                      ( pair )
# 5629 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = block;
          MenhirLib.EngineTypes.startp = _startpos_block_;
          MenhirLib.EngineTypes.endp = _endpos_block_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let block : 'tv_curly_block_empty_ = Obj.magic block in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_block_ in
        let _endpos = _endpos_block_ in
        let _v : 'tv_object_literal = 
# 528 "js_parser.mly"
   ( let _pairs, pi_start, _pi_end = block in pi_start, J.EObj [] )
# 5654 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = block;
          MenhirLib.EngineTypes.startp = _startpos_block_;
          MenhirLib.EngineTypes.endp = _endpos_block_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let block : 'tv_curly_block_separated_or_terminated_list_T_COMMA_object_key_value__ = Obj.magic block in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_block_ in
        let _endpos = _endpos_block_ in
        let _v : 'tv_object_literal = 
# 530 "js_parser.mly"
   ( let pairs, pi_start, _pi_end = block in pi_start, J.EObj pairs )
# 5679 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_expression_ = 
# 114 "<standard.mly>"
    ( None )
# 5697 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_expression_ = 
# 116 "<standard.mly>"
    ( Some x )
# 5722 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_expression_no_in_ = 
# 114 "<standard.mly>"
    ( None )
# 5740 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_expression_no_in = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_expression_no_in_ = 
# 116 "<standard.mly>"
    ( Some x )
# 5765 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_finally_ = 
# 114 "<standard.mly>"
    ( None )
# 5783 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_finally = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_finally_ = 
# 116 "<standard.mly>"
    ( Some x )
# 5808 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_initializer__ = 
# 114 "<standard.mly>"
    ( None )
# 5826 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_initializer_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_initializer__ = 
# 116 "<standard.mly>"
    ( Some x )
# 5851 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_initializer_no_in_ = 
# 114 "<standard.mly>"
    ( None )
# 5869 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_initializer_no_in = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_initializer_no_in_ = 
# 116 "<standard.mly>"
    ( Some x )
# 5894 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_label_ = 
# 114 "<standard.mly>"
    ( None )
# 5912 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_label = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_label_ = 
# 116 "<standard.mly>"
    ( Some x )
# 5937 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_pair_default_clause_list_case_clause___ = 
# 114 "<standard.mly>"
    ( None )
# 5955 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let y : 'tv_list_case_clause_ = Obj.magic y in
        let x : 'tv_default_clause = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_option_pair_default_clause_list_case_clause___ = let x = 
# 167 "<standard.mly>"
    ( (x, y) )
# 5987 "js_parser.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 5992 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_variable_ = 
# 114 "<standard.mly>"
    ( None )
# 6010 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_variable_ = 
# 116 "<standard.mly>"
    ( Some x )
# 6035 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_pre_in_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_post_in_expression = 
# 333 "js_parser.mly"
                     ( _1 )
# 6060 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6094 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 625 "js_parser.mly"
                        ( J.Lt         )
# 6104 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6109 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6115 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6149 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 626 "js_parser.mly"
                        ( J.Gt         )
# 6159 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6164 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6170 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6204 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 627 "js_parser.mly"
                        ( J.Le         )
# 6214 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6219 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6225 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6259 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 628 "js_parser.mly"
                        ( J.Ge         )
# 6269 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6274 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6280 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6314 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 629 "js_parser.mly"
                        ( J.InstanceOf )
# 6324 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6329 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6335 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6369 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 630 "js_parser.mly"
                        ( J.EqEq       )
# 6379 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6384 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6390 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6424 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 631 "js_parser.mly"
                        ( J.NotEq      )
# 6434 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6439 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6445 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6479 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 632 "js_parser.mly"
                        ( J.EqEqEq     )
# 6489 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6494 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6500 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6534 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 633 "js_parser.mly"
                        ( J.NotEqEq    )
# 6544 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6549 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6555 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6589 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 634 "js_parser.mly"
                        ( J.Band       )
# 6599 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6604 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6610 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6644 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 635 "js_parser.mly"
                        ( J.Bxor       )
# 6654 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6659 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6665 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6699 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 636 "js_parser.mly"
                        ( J.Bor        )
# 6709 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6714 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6720 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6754 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 637 "js_parser.mly"
                        ( J.And        )
# 6764 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6769 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6775 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6809 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op =
          let op = 
# 638 "js_parser.mly"
                        ( J.Or         )
# 6819 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 6824 "js_parser.ml"
          
        in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6830 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6864 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression = let op = 
# 642 "js_parser.mly"
        ( J.In )
# 6873 "js_parser.ml"
         in
        
# 337 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6878 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_pre_in_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_post_in_expression_no_in = 
# 408 "js_parser.mly"
                     ( _1 )
# 6903 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6937 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 625 "js_parser.mly"
                        ( J.Lt         )
# 6946 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6951 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 6985 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 626 "js_parser.mly"
                        ( J.Gt         )
# 6994 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 6999 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7033 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 627 "js_parser.mly"
                        ( J.Le         )
# 7042 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7047 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7081 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 628 "js_parser.mly"
                        ( J.Ge         )
# 7090 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7095 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7129 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 629 "js_parser.mly"
                        ( J.InstanceOf )
# 7138 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7143 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7177 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 630 "js_parser.mly"
                        ( J.EqEq       )
# 7186 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7191 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7225 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 631 "js_parser.mly"
                        ( J.NotEq      )
# 7234 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7239 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7273 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 632 "js_parser.mly"
                        ( J.EqEqEq     )
# 7282 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7287 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7321 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 633 "js_parser.mly"
                        ( J.NotEqEq    )
# 7330 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7335 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7369 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 634 "js_parser.mly"
                        ( J.Band       )
# 7378 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7383 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7417 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 635 "js_parser.mly"
                        ( J.Bxor       )
# 7426 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7431 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7465 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 636 "js_parser.mly"
                        ( J.Bor        )
# 7474 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7479 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7513 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 637 "js_parser.mly"
                        ( J.And        )
# 7522 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7527 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7561 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_in = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_in = let op = 
# 638 "js_parser.mly"
                        ( J.Or         )
# 7570 "js_parser.ml"
         in
        
# 412 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7575 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_pre_in_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_post_in_expression_no_statement = 
# 432 "js_parser.mly"
                                  ( _1 )
# 7600 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7634 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 625 "js_parser.mly"
                        ( J.Lt         )
# 7644 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7649 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7655 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7689 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 626 "js_parser.mly"
                        ( J.Gt         )
# 7699 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7704 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7710 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7744 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 627 "js_parser.mly"
                        ( J.Le         )
# 7754 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7759 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7765 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7799 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 628 "js_parser.mly"
                        ( J.Ge         )
# 7809 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7814 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7820 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7854 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 629 "js_parser.mly"
                        ( J.InstanceOf )
# 7864 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7869 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7875 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7909 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 630 "js_parser.mly"
                        ( J.EqEq       )
# 7919 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7924 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7930 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 7964 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 631 "js_parser.mly"
                        ( J.NotEq      )
# 7974 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 7979 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 7985 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8019 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 632 "js_parser.mly"
                        ( J.EqEqEq     )
# 8029 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8034 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8040 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8074 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 633 "js_parser.mly"
                        ( J.NotEqEq    )
# 8084 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8089 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8095 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8129 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 634 "js_parser.mly"
                        ( J.Band       )
# 8139 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8144 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8150 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8184 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 635 "js_parser.mly"
                        ( J.Bxor       )
# 8194 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8199 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8205 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8239 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 636 "js_parser.mly"
                        ( J.Bor        )
# 8249 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8254 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8260 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8294 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 637 "js_parser.mly"
                        ( J.And        )
# 8304 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8309 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8315 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8349 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op =
          let op = 
# 638 "js_parser.mly"
                        ( J.Or         )
# 8359 "js_parser.ml"
           in
          
# 641 "js_parser.mly"
                                                      ( op )
# 8364 "js_parser.ml"
          
        in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8370 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_post_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8404 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_post_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_post_in_expression_no_statement = let op = 
# 642 "js_parser.mly"
        ( J.In )
# 8413 "js_parser.ml"
         in
        
# 436 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 8418 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8439 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_operator = 
# 668 "js_parser.mly"
             ( J.IncrA )
# 8447 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8468 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_operator = 
# 669 "js_parser.mly"
             ( J.DecrA )
# 8476 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_left_hand_side_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pre_in_expression = 
# 341 "js_parser.mly"
   ( _1 )
# 8501 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let op : 'tv_postfix_operator = Obj.magic op in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_op_ in
        let _v : 'tv_pre_in_expression = 
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8533 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8561 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 655 "js_parser.mly"
             ( J.Delete )
# 8569 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8574 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8602 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 656 "js_parser.mly"
             ( J.Void   )
# 8610 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8615 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8643 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 657 "js_parser.mly"
             ( J.Typeof )
# 8651 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8656 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8684 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 658 "js_parser.mly"
             ( J.IncrB  )
# 8692 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8697 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8725 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 659 "js_parser.mly"
             ( J.IncrB  )
# 8733 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8738 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8766 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 660 "js_parser.mly"
             ( J.DecrB  )
# 8774 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8779 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8807 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 661 "js_parser.mly"
             ( J.DecrB  )
# 8815 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8820 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8848 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 662 "js_parser.mly"
             ( J.Pl     )
# 8856 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8861 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8889 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 663 "js_parser.mly"
             ( J.Neg    )
# 8897 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8902 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8930 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 664 "js_parser.mly"
             ( J.Bnot   )
# 8938 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8943 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 8971 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression = let op = 
# 665 "js_parser.mly"
             ( J.Not    )
# 8979 "js_parser.ml"
         in
        
# 344 "js_parser.mly"
   ( J.EUn (op, e) )
# 8984 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9018 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 645 "js_parser.mly"
             ( J.Mul   )
# 9027 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9032 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9066 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 646 "js_parser.mly"
             ( J.Div   )
# 9075 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9080 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9114 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 647 "js_parser.mly"
             ( J.Mod   )
# 9123 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9128 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9162 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 648 "js_parser.mly"
             ( J.Plus  )
# 9171 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9176 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9210 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 649 "js_parser.mly"
             ( J.Minus )
# 9219 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9224 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9258 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 650 "js_parser.mly"
             ( J.Lsl   )
# 9267 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9272 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9306 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 651 "js_parser.mly"
             ( J.Asr   )
# 9315 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9320 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9354 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression = let op = 
# 652 "js_parser.mly"
             ( J.Lsr   )
# 9363 "js_parser.ml"
         in
        
# 348 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9368 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_left_hand_side_expression_no_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pre_in_expression_no_statement = 
# 440 "js_parser.mly"
   ( _1 )
# 9393 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let op : 'tv_postfix_operator = Obj.magic op in
        let e : 'tv_pre_in_expression_no_statement = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_op_ in
        let _v : 'tv_pre_in_expression_no_statement = 
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9425 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9453 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 655 "js_parser.mly"
             ( J.Delete )
# 9461 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9466 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9494 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 656 "js_parser.mly"
             ( J.Void   )
# 9502 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9507 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9535 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 657 "js_parser.mly"
             ( J.Typeof )
# 9543 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9548 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9576 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 658 "js_parser.mly"
             ( J.IncrB  )
# 9584 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9589 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9617 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 659 "js_parser.mly"
             ( J.IncrB  )
# 9625 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9630 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9658 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 660 "js_parser.mly"
             ( J.DecrB  )
# 9666 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9671 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9699 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 661 "js_parser.mly"
             ( J.DecrB  )
# 9707 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9712 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9740 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 662 "js_parser.mly"
             ( J.Pl     )
# 9748 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9753 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9781 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 663 "js_parser.mly"
             ( J.Neg    )
# 9789 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9794 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9822 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 664 "js_parser.mly"
             ( J.Bnot   )
# 9830 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9835 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : 'tv_pre_in_expression = Obj.magic e in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9863 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 665 "js_parser.mly"
             ( J.Not    )
# 9871 "js_parser.ml"
         in
        
# 443 "js_parser.mly"
   ( J.EUn (op, e) )
# 9876 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9910 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 645 "js_parser.mly"
             ( J.Mul   )
# 9919 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9924 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 9958 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 646 "js_parser.mly"
             ( J.Div   )
# 9967 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 9972 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 10006 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 647 "js_parser.mly"
             ( J.Mod   )
# 10015 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 10020 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 10054 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 648 "js_parser.mly"
             ( J.Plus  )
# 10063 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 10068 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 10102 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 649 "js_parser.mly"
             ( J.Minus )
# 10111 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 10116 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 10150 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 650 "js_parser.mly"
             ( J.Lsl   )
# 10159 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 10164 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 10198 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 651 "js_parser.mly"
             ( J.Asr   )
# 10207 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 10212 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = right;
          MenhirLib.EngineTypes.startp = _startpos_right_;
          MenhirLib.EngineTypes.endp = _endpos_right_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = left;
              MenhirLib.EngineTypes.startp = _startpos_left_;
              MenhirLib.EngineTypes.endp = _endpos_left_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let right : 'tv_pre_in_expression = Obj.magic right in
        let _1 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 10246 "js_parser.ml"
        ) = Obj.magic _1 in
        let left : 'tv_pre_in_expression_no_statement = Obj.magic left in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_left_ in
        let _endpos = _endpos_right_ in
        let _v : 'tv_pre_in_expression_no_statement = let op = 
# 652 "js_parser.mly"
             ( J.Lsr   )
# 10255 "js_parser.ml"
         in
        
# 447 "js_parser.mly"
   ( J.EBin (op, left, right) )
# 10260 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : 'tv_primary_expression_no_statement = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_primary_expression = 
# 377 "js_parser.mly"
                         ( e )
# 10285 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : 'tv_object_literal = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_primary_expression = 
# 377 "js_parser.mly"
                         ( e )
# 10310 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : 'tv_function_expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_primary_expression = 
# 377 "js_parser.mly"
                         ( e )
# 10335 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pi;
          MenhirLib.EngineTypes.startp = _startpos_pi_;
          MenhirLib.EngineTypes.endp = _endpos_pi_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 10356 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_pi_ in
        let _v : 'tv_primary_expression_no_statement = 
# 380 "js_parser.mly"
                     ( (pi, J.EVar (var pi "this")) )
# 10364 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_variable_with_loc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression_no_statement = 
# 381 "js_parser.mly"
                     ( let (i, pi) = _1 in (pi, J.EVar i) )
# 10389 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = n;
          MenhirLib.EngineTypes.startp = _startpos_n_;
          MenhirLib.EngineTypes.endp = _endpos_n_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let n : 'tv_null_literal = Obj.magic n in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_n_ in
        let _endpos = _endpos_n_ in
        let _v : 'tv_primary_expression_no_statement = 
# 382 "js_parser.mly"
                     ( n )
# 10414 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let b : 'tv_boolean_literal = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_primary_expression_no_statement = 
# 383 "js_parser.mly"
                     ( b )
# 10439 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_numeric_literal = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression_no_statement = 
# 384 "js_parser.mly"
                     ( let (start, n) = _1 in (start, J.ENum (J.Num.of_string_unsafe n)) )
# 10464 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 49 "js_parser.mly"
      (string * Parse_info.t * int)
# 10485 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression_no_statement = 
# 385 "js_parser.mly"
                     ( let (s, start, _len) = _1 in (start, J.EStr (s, `Utf8)) )
# 10493 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let r : 'tv_regex_literal = Obj.magic r in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_primary_expression_no_statement = 
# 386 "js_parser.mly"
                                  ( r )
# 10518 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let a : 'tv_array_literal = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_a_ in
        let _v : 'tv_primary_expression_no_statement = 
# 387 "js_parser.mly"
                                  ( a )
# 10543 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi;
              MenhirLib.EngineTypes.startp = _startpos_pi_;
              MenhirLib.EngineTypes.endp = _endpos_pi_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 10576 "js_parser.ml"
        ) = Obj.magic _3 in
        let e : 'tv_expression = Obj.magic e in
        let pi : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 10582 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expression_no_statement = 
# 388 "js_parser.mly"
                                     ( (pi, e) )
# 10590 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 105 "js_parser.mly"
       (Parse_info.t)
# 10617 "js_parser.ml"
        ) = Obj.magic _2 in
        let l : 'tv_list_source_element_ = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 133 "js_parser.mly"
       (Javascript.program)
# 10626 "js_parser.ml"
        ) = 
# 143 "js_parser.mly"
                         ( l )
# 10630 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_identifier_or_kw = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_property_name = 
# 601 "js_parser.mly"
                      ( J.PNI i )
# 10655 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 49 "js_parser.mly"
      (string * Parse_info.t * int)
# 10676 "js_parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_property_name = 
# 602 "js_parser.mly"
                      (
    let s, _info, _len = s in J.PNS s )
# 10685 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = n;
          MenhirLib.EngineTypes.startp = _startpos_n_;
          MenhirLib.EngineTypes.endp = _endpos_n_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let n : 'tv_numeric_literal = Obj.magic n in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_n_ in
        let _endpos = _endpos_n_ in
        let _v : 'tv_property_name = 
# 604 "js_parser.mly"
                      ( J.PNN (J.Num.of_string_unsafe (snd n)) )
# 10710 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 50 "js_parser.mly"
      (string * Parse_info.t)
# 10731 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_regex_literal = 
# 492 "js_parser.mly"
           (
   let (s, pi) = _1 in
   let len = String.length s in
   let regexp, option =
     if s.[len - 1] = '/'
     then String.sub s 1 (len - 2),None
     else
       let i = String.rindex s '/' in
       String.sub s 1 (i - 1),Some (String.sub s (i+1) (len - i - 1))
   in
   (pi, J.ERegexp (regexp, option)) )
# 10749 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_expression_ = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 10777 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_return_statement = 
# 252 "js_parser.mly"
                           ( (J.Return_statement _2, J.Pi pi) )
# 10785 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_arg = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_arg_ = 
# 241 "<standard.mly>"
    ( [ x ] )
# 10810 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_T_COMMA_arg_ = Obj.magic xs in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 10844 "js_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_arg = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_arg_ = 
# 243 "<standard.mly>"
    ( x :: xs )
# 10853 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let y : 'tv_option_initializer__ = Obj.magic y in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer____ = let x = 
# 167 "<standard.mly>"
    ( (x, y) )
# 10885 "js_parser.ml"
         in
        
# 241 "<standard.mly>"
    ( [ x ] )
# 10890 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = y;
              MenhirLib.EngineTypes.startp = _startpos_y_;
              MenhirLib.EngineTypes.endp = _endpos_y_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer____ = Obj.magic xs in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 10930 "js_parser.ml"
        ) = Obj.magic _2 in
        let y : 'tv_option_initializer__ = Obj.magic y in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer____ = let x = 
# 167 "<standard.mly>"
    ( (x, y) )
# 10940 "js_parser.ml"
         in
        
# 243 "<standard.mly>"
    ( x :: xs )
# 10945 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let y : 'tv_option_initializer_no_in_ = Obj.magic y in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer_no_in___ = let x = 
# 167 "<standard.mly>"
    ( (x, y) )
# 10977 "js_parser.ml"
         in
        
# 241 "<standard.mly>"
    ( [ x ] )
# 10982 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = y;
              MenhirLib.EngineTypes.startp = _startpos_y_;
              MenhirLib.EngineTypes.endp = _endpos_y_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer_no_in___ = Obj.magic xs in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11022 "js_parser.ml"
        ) = Obj.magic _2 in
        let y : 'tv_option_initializer_no_in_ = Obj.magic y in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer_no_in___ = let x = 
# 167 "<standard.mly>"
    ( (x, y) )
# 11032 "js_parser.ml"
         in
        
# 243 "<standard.mly>"
    ( x :: xs )
# 11037 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_variable_ = 
# 241 "<standard.mly>"
    ( [ x ] )
# 11062 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_T_COMMA_variable_ = Obj.magic xs in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11096 "js_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_variable = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_T_COMMA_variable_ = 
# 243 "<standard.mly>"
    ( x :: xs )
# 11105 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_object_key_value = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_or_terminated_list_T_COMMA_object_key_value_ = 
# 694 "js_parser.mly"
       ( [x] )
# 11130 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11157 "js_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_object_key_value = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_separated_or_terminated_list_T_COMMA_object_key_value_ = 
# 695 "js_parser.mly"
                 ( [x] )
# 11166 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : 'tv_separated_or_terminated_list_T_COMMA_object_key_value_ = Obj.magic xs in
        let _2 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11200 "js_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_object_key_value = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_or_terminated_list_T_COMMA_object_key_value_ = 
# 696 "js_parser.mly"
                                                               ( x :: xs )
# 11209 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_source_element = 
# 150 "js_parser.mly"
   ( let statement, pi = _1 in J.Statement statement, pi )
# 11234 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_source_element = 
# 152 "js_parser.mly"
   ( let declaration, pi = _1 in J.Function_declaration declaration, pi )
# 11259 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 105 "js_parser.mly"
       (Parse_info.t)
# 11286 "js_parser.ml"
        ) = Obj.magic _2 in
        let e : 'tv_expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 134 "js_parser.mly"
       (Javascript.expression)
# 11295 "js_parser.ml"
        ) = 
# 146 "js_parser.mly"
                    ( e )
# 11299 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_statement_no_semi = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement = 
# 183 "js_parser.mly"
                       ( s )
# 11324 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_either_T_SEMICOLON_T_VIRTUAL_SEMICOLON_ = Obj.magic _2 in
        let s : 'tv_statement_need_semi = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 184 "js_parser.mly"
                                                                  ( s )
# 11356 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_variable_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11381 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_expression_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11406 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_do_while_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11431 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_continue_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11456 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_break_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11481 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_return_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11506 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_throw_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11531 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_debugger_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_need_semi = 
# 180 "js_parser.mly"
                        ( s )
# 11556 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = block;
          MenhirLib.EngineTypes.startp = _startpos_block_;
          MenhirLib.EngineTypes.endp = _endpos_block_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let block : 'tv_curly_block_list_statement__ = Obj.magic block in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_block_ in
        let _endpos = _endpos_block_ in
        let _v : 'tv_statement_no_semi = 
# 160 "js_parser.mly"
   ( let statements, pi_start, _pi_end = block in
     J.Block statements, J.Pi pi_start )
# 11582 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_if_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11607 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_while_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11632 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_for_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11657 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_for_in_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11682 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_with_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11707 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_switch_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11732 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_try_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11757 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_labeled_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11782 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : 'tv_empty_statement = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_statement_no_semi = 
# 170 "js_parser.mly"
                     ( s )
# 11807 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__3_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__3_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = item;
                    MenhirLib.EngineTypes.startp = _startpos_item_;
                    MenhirLib.EngineTypes.endp = _endpos_item_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = pi;
                        MenhirLib.EngineTypes.startp = _startpos_pi_;
                        MenhirLib.EngineTypes.endp = _endpos_pi_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11870 "js_parser.ml"
        ) = Obj.magic _5 in
        let y : 'tv_option_pair_default_clause_list_case_clause___ = Obj.magic y in
        let x : 'tv_list_case_clause_ = Obj.magic x in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11877 "js_parser.ml"
        ) = Obj.magic _3 in
        let _3_inlined1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11882 "js_parser.ml"
        ) = Obj.magic _3_inlined1 in
        let item : 'tv_expression = Obj.magic item in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 11888 "js_parser.ml"
        ) = Obj.magic _1 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 11893 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_switch_statement = let pair = 
# 167 "<standard.mly>"
    ( (x, y) )
# 11901 "js_parser.ml"
         in
        let subject = 
# 691 "js_parser.mly"
                                                         ( item )
# 11906 "js_parser.ml"
         in
        
# 260 "js_parser.mly"
   ( let switch = match pair with
       | cases, None ->
         J.Switch_statement (subject, cases, None, [])
       | cases, Some (default, more_cases) ->
         J.Switch_statement (subject, cases, Some default, more_cases)
      in switch, J.Pi pi )
# 11916 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = alternative;
          MenhirLib.EngineTypes.startp = _startpos_alternative_;
          MenhirLib.EngineTypes.endp = _endpos_alternative_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = consequence;
              MenhirLib.EngineTypes.startp = _startpos_consequence_;
              MenhirLib.EngineTypes.endp = _endpos_consequence_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = condition;
                  MenhirLib.EngineTypes.startp = _startpos_condition_;
                  MenhirLib.EngineTypes.endp = _endpos_condition_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let alternative : 'tv_assignment_expression = Obj.magic alternative in
        let _4 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 11962 "js_parser.ml"
        ) = Obj.magic _4 in
        let consequence : 'tv_assignment_expression = Obj.magic consequence in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 11968 "js_parser.ml"
        ) = Obj.magic _2 in
        let condition : 'tv_post_in_expression = Obj.magic condition in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_condition_ in
        let _endpos = _endpos_alternative_ in
        let _v : 'tv_ternary_post_in_expression_assignment_expression_ = 
# 330 "js_parser.mly"
   ( J.ECond (condition, consequence, alternative) )
# 11977 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = alternative;
          MenhirLib.EngineTypes.startp = _startpos_alternative_;
          MenhirLib.EngineTypes.endp = _endpos_alternative_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = consequence;
              MenhirLib.EngineTypes.startp = _startpos_consequence_;
              MenhirLib.EngineTypes.endp = _endpos_consequence_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = condition;
                  MenhirLib.EngineTypes.startp = _startpos_condition_;
                  MenhirLib.EngineTypes.endp = _endpos_condition_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let alternative : 'tv_assignment_expression_no_in = Obj.magic alternative in
        let _4 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 12023 "js_parser.ml"
        ) = Obj.magic _4 in
        let consequence : 'tv_assignment_expression_no_in = Obj.magic consequence in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 12029 "js_parser.ml"
        ) = Obj.magic _2 in
        let condition : 'tv_post_in_expression_no_in = Obj.magic condition in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_condition_ in
        let _endpos = _endpos_alternative_ in
        let _v : 'tv_ternary_post_in_expression_no_in_assignment_expression_no_in_ = 
# 330 "js_parser.mly"
   ( J.ECond (condition, consequence, alternative) )
# 12038 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = alternative;
          MenhirLib.EngineTypes.startp = _startpos_alternative_;
          MenhirLib.EngineTypes.endp = _endpos_alternative_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = consequence;
              MenhirLib.EngineTypes.startp = _startpos_consequence_;
              MenhirLib.EngineTypes.endp = _endpos_consequence_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = condition;
                  MenhirLib.EngineTypes.startp = _startpos_condition_;
                  MenhirLib.EngineTypes.endp = _endpos_condition_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let alternative : 'tv_assignment_expression = Obj.magic alternative in
        let _4 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 12084 "js_parser.ml"
        ) = Obj.magic _4 in
        let consequence : 'tv_assignment_expression = Obj.magic consequence in
        let _2 : (
# 79 "js_parser.mly"
       (Parse_info.t)
# 12090 "js_parser.ml"
        ) = Obj.magic _2 in
        let condition : 'tv_post_in_expression_no_statement = Obj.magic condition in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_condition_ in
        let _endpos = _endpos_alternative_ in
        let _v : 'tv_ternary_post_in_expression_no_statement_assignment_expression_ = 
# 330 "js_parser.mly"
   ( J.ECond (condition, consequence, alternative) )
# 12099 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_expression = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 12127 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_throw_statement = 
# 268 "js_parser.mly"
                         ( (J.Throw_statement _2, J.Pi pi) )
# 12135 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = pi;
                MenhirLib.EngineTypes.startp = _startpos_pi_;
                MenhirLib.EngineTypes.endp = _endpos_pi_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_option_finally_ = Obj.magic _4 in
        let _3 : 'tv_catch = Obj.magic _3 in
        let _2 : 'tv_block = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 12177 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_try_statement = 
# 271 "js_parser.mly"
                                 ( (J.Try_statement (_2, Some _3, _4), J.Pi pi) )
# 12185 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pi;
              MenhirLib.EngineTypes.startp = _startpos_pi_;
              MenhirLib.EngineTypes.endp = _endpos_pi_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_finally = Obj.magic _3 in
        let _2 : 'tv_block = Obj.magic _2 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 12220 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_try_statement = 
# 272 "js_parser.mly"
                                ( (J.Try_statement (_2, None, Some _3), J.Pi pi) )
# 12228 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_variable_with_loc = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_variable = 
# 592 "js_parser.mly"
                       ( fst i )
# 12253 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pi;
            MenhirLib.EngineTypes.startp = _startpos_pi_;
            MenhirLib.EngineTypes.endp = _endpos_pi_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let list : 'tv_separated_nonempty_list_T_COMMA_pair_variable_option_initializer____ = Obj.magic list in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 12281 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_variable_statement = 
# 195 "js_parser.mly"
   ( J.Variable_statement list, J.Pi pi )
# 12289 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 48 "js_parser.mly"
      (string * Parse_info.t)
# 12310 "js_parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_variable_with_loc = 
# 595 "js_parser.mly"
                  ( let name, pi = i in var pi name, pi )
# 12318 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = item;
              MenhirLib.EngineTypes.startp = _startpos_item_;
              MenhirLib.EngineTypes.endp = _endpos_item_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pi;
                  MenhirLib.EngineTypes.startp = _startpos_pi_;
                  MenhirLib.EngineTypes.endp = _endpos_pi_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let body : 'tv_statement = Obj.magic body in
        let _3 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 12364 "js_parser.ml"
        ) = Obj.magic _3 in
        let item : 'tv_expression = Obj.magic item in
        let _1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 12370 "js_parser.ml"
        ) = Obj.magic _1 in
        let pi : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 12375 "js_parser.ml"
        ) = Obj.magic pi in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pi_ in
        let _endpos = _endpos_body_ in
        let _v : 'tv_while_statement = let condition = 
# 691 "js_parser.mly"
                                                         ( item )
# 12383 "js_parser.ml"
         in
        
# 221 "js_parser.mly"
     ( (J.While_statement (condition, body), J.Pi pi) )
# 12388 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__3_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__3_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = item;
              MenhirLib.EngineTypes.startp = _startpos_item_;
              MenhirLib.EngineTypes.endp = _endpos_item_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _3_inlined1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 12434 "js_parser.ml"
        ) = Obj.magic _3_inlined1 in
        let item : 'tv_expression = Obj.magic item in
        let _1_inlined1 : (
# 64 "js_parser.mly"
       (Parse_info.t)
# 12440 "js_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (
# 53 "js_parser.mly"
       (Parse_info.t)
# 12445 "js_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_with_statement = let _2 = 
# 691 "js_parser.mly"
                                                         ( item )
# 12453 "js_parser.ml"
         in
        
# 255 "js_parser.mly"
                                              ( assert false )
# 12458 "js_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let standalone_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 531 lexer lexbuf) : (
# 134 "js_parser.mly"
       (Javascript.expression)
# 12489 "js_parser.ml"
    ))

and program =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (
# 133 "js_parser.mly"
       (Javascript.program)
# 12497 "js_parser.ml"
    ))

module Incremental = struct
  
  let standalone_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 531 initial_position) : (
# 134 "js_parser.mly"
       (Javascript.expression)
# 12507 "js_parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and program =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 133 "js_parser.mly"
       (Javascript.program)
# 12515 "js_parser.ml"
      ) MenhirInterpreter.checkpoint)
  
end

# 269 "<standard.mly>"
  

# 12523 "js_parser.ml"
